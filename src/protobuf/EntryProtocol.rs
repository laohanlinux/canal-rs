// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `EntryProtocol.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Entry {
    // message fields
    pub header: ::protobuf::SingularPtrField<Header>,
    pub storeValue: ::std::vec::Vec<u8>,
    // message oneof groups
    pub entryType_present: ::std::option::Option<Entry_oneof_entryType_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Entry {
    fn default() -> &'a Entry {
        <Entry as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Entry_oneof_entryType_present {
    entryType(EntryType),
}

impl Entry {
    pub fn new() -> Entry {
        ::std::default::Default::default()
    }

    // .com.alibaba.otter.canal.protocol.Header header = 1;


    pub fn get_header(&self) -> &Header {
        self.header.as_ref().unwrap_or_else(|| Header::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: Header) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut Header {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> Header {
        self.header.take().unwrap_or_else(|| Header::new())
    }

    // .com.alibaba.otter.canal.protocol.EntryType entryType = 2;


    pub fn get_entryType(&self) -> EntryType {
        match self.entryType_present {
            ::std::option::Option::Some(Entry_oneof_entryType_present::entryType(v)) => v,
            _ => EntryType::ENTRYTYPECOMPATIBLEPROTO2,
        }
    }
    pub fn clear_entryType(&mut self) {
        self.entryType_present = ::std::option::Option::None;
    }

    pub fn has_entryType(&self) -> bool {
        match self.entryType_present {
            ::std::option::Option::Some(Entry_oneof_entryType_present::entryType(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_entryType(&mut self, v: EntryType) {
        self.entryType_present = ::std::option::Option::Some(Entry_oneof_entryType_present::entryType(v))
    }

    // bytes storeValue = 3;


    pub fn get_storeValue(&self) -> &[u8] {
        &self.storeValue
    }
    pub fn clear_storeValue(&mut self) {
        self.storeValue.clear();
    }

    // Param is passed by value, moved
    pub fn set_storeValue(&mut self, v: ::std::vec::Vec<u8>) {
        self.storeValue = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storeValue(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storeValue
    }

    // Take field
    pub fn take_storeValue(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storeValue, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Entry {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.entryType_present = ::std::option::Option::Some(Entry_oneof_entryType_present::entryType(is.read_enum()?));
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storeValue)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.storeValue.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.storeValue);
        }
        if let ::std::option::Option::Some(ref v) = self.entryType_present {
            match v {
                &Entry_oneof_entryType_present::entryType(v) => {
                    my_size += ::protobuf::rt::enum_size(2, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.storeValue.is_empty() {
            os.write_bytes(3, &self.storeValue)?;
        }
        if let ::std::option::Option::Some(ref v) = self.entryType_present {
            match v {
                &Entry_oneof_entryType_present::entryType(v) => {
                    os.write_enum(2, v.value())?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Entry {
        Entry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Header>>(
                    "header",
                    |m: &Entry| { &m.header },
                    |m: &mut Entry| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, EntryType>(
                    "entryType",
                    Entry::has_entryType,
                    Entry::get_entryType,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "storeValue",
                    |m: &Entry| { &m.storeValue },
                    |m: &mut Entry| { &mut m.storeValue },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Entry>(
                    "Entry",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Entry {
        static mut instance: ::protobuf::lazy::Lazy<Entry> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Entry,
        };
        unsafe {
            instance.get(Entry::new)
        }
    }
}

impl ::protobuf::Clear for Entry {
    fn clear(&mut self) {
        self.header.clear();
        self.entryType_present = ::std::option::Option::None;
        self.storeValue.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Entry {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Header {
    // message fields
    pub logfileName: ::std::string::String,
    pub logfileOffset: i64,
    pub serverId: i64,
    pub serverenCode: ::std::string::String,
    pub executeTime: i64,
    pub schemaName: ::std::string::String,
    pub tableName: ::std::string::String,
    pub eventLength: i64,
    pub props: ::protobuf::RepeatedField<Pair>,
    pub gtid: ::std::string::String,
    // message oneof groups
    pub version_present: ::std::option::Option<Header_oneof_version_present>,
    pub sourceType_present: ::std::option::Option<Header_oneof_sourceType_present>,
    pub eventType_present: ::std::option::Option<Header_oneof_eventType_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Header_oneof_version_present {
    version(i32),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Header_oneof_sourceType_present {
    sourceType(Type),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Header_oneof_eventType_present {
    eventType(EventType),
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    // int32 version = 1;


    pub fn get_version(&self) -> i32 {
        match self.version_present {
            ::std::option::Option::Some(Header_oneof_version_present::version(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_version(&mut self) {
        self.version_present = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        match self.version_present {
            ::std::option::Option::Some(Header_oneof_version_present::version(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version_present = ::std::option::Option::Some(Header_oneof_version_present::version(v))
    }

    // string logfileName = 2;


    pub fn get_logfileName(&self) -> &str {
        &self.logfileName
    }
    pub fn clear_logfileName(&mut self) {
        self.logfileName.clear();
    }

    // Param is passed by value, moved
    pub fn set_logfileName(&mut self, v: ::std::string::String) {
        self.logfileName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logfileName(&mut self) -> &mut ::std::string::String {
        &mut self.logfileName
    }

    // Take field
    pub fn take_logfileName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.logfileName, ::std::string::String::new())
    }

    // int64 logfileOffset = 3;


    pub fn get_logfileOffset(&self) -> i64 {
        self.logfileOffset
    }
    pub fn clear_logfileOffset(&mut self) {
        self.logfileOffset = 0;
    }

    // Param is passed by value, moved
    pub fn set_logfileOffset(&mut self, v: i64) {
        self.logfileOffset = v;
    }

    // int64 serverId = 4;


    pub fn get_serverId(&self) -> i64 {
        self.serverId
    }
    pub fn clear_serverId(&mut self) {
        self.serverId = 0;
    }

    // Param is passed by value, moved
    pub fn set_serverId(&mut self, v: i64) {
        self.serverId = v;
    }

    // string serverenCode = 5;


    pub fn get_serverenCode(&self) -> &str {
        &self.serverenCode
    }
    pub fn clear_serverenCode(&mut self) {
        self.serverenCode.clear();
    }

    // Param is passed by value, moved
    pub fn set_serverenCode(&mut self, v: ::std::string::String) {
        self.serverenCode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serverenCode(&mut self) -> &mut ::std::string::String {
        &mut self.serverenCode
    }

    // Take field
    pub fn take_serverenCode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serverenCode, ::std::string::String::new())
    }

    // int64 executeTime = 6;


    pub fn get_executeTime(&self) -> i64 {
        self.executeTime
    }
    pub fn clear_executeTime(&mut self) {
        self.executeTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_executeTime(&mut self, v: i64) {
        self.executeTime = v;
    }

    // .com.alibaba.otter.canal.protocol.Type sourceType = 7;


    pub fn get_sourceType(&self) -> Type {
        match self.sourceType_present {
            ::std::option::Option::Some(Header_oneof_sourceType_present::sourceType(v)) => v,
            _ => Type::TYPECOMPATIBLEPROTO2,
        }
    }
    pub fn clear_sourceType(&mut self) {
        self.sourceType_present = ::std::option::Option::None;
    }

    pub fn has_sourceType(&self) -> bool {
        match self.sourceType_present {
            ::std::option::Option::Some(Header_oneof_sourceType_present::sourceType(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sourceType(&mut self, v: Type) {
        self.sourceType_present = ::std::option::Option::Some(Header_oneof_sourceType_present::sourceType(v))
    }

    // string schemaName = 8;


    pub fn get_schemaName(&self) -> &str {
        &self.schemaName
    }
    pub fn clear_schemaName(&mut self) {
        self.schemaName.clear();
    }

    // Param is passed by value, moved
    pub fn set_schemaName(&mut self, v: ::std::string::String) {
        self.schemaName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schemaName(&mut self) -> &mut ::std::string::String {
        &mut self.schemaName
    }

    // Take field
    pub fn take_schemaName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schemaName, ::std::string::String::new())
    }

    // string tableName = 9;


    pub fn get_tableName(&self) -> &str {
        &self.tableName
    }
    pub fn clear_tableName(&mut self) {
        self.tableName.clear();
    }

    // Param is passed by value, moved
    pub fn set_tableName(&mut self, v: ::std::string::String) {
        self.tableName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tableName(&mut self) -> &mut ::std::string::String {
        &mut self.tableName
    }

    // Take field
    pub fn take_tableName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tableName, ::std::string::String::new())
    }

    // int64 eventLength = 10;


    pub fn get_eventLength(&self) -> i64 {
        self.eventLength
    }
    pub fn clear_eventLength(&mut self) {
        self.eventLength = 0;
    }

    // Param is passed by value, moved
    pub fn set_eventLength(&mut self, v: i64) {
        self.eventLength = v;
    }

    // .com.alibaba.otter.canal.protocol.EventType eventType = 11;


    pub fn get_eventType(&self) -> EventType {
        match self.eventType_present {
            ::std::option::Option::Some(Header_oneof_eventType_present::eventType(v)) => v,
            _ => EventType::EVENTTYPECOMPATIBLEPROTO2,
        }
    }
    pub fn clear_eventType(&mut self) {
        self.eventType_present = ::std::option::Option::None;
    }

    pub fn has_eventType(&self) -> bool {
        match self.eventType_present {
            ::std::option::Option::Some(Header_oneof_eventType_present::eventType(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_eventType(&mut self, v: EventType) {
        self.eventType_present = ::std::option::Option::Some(Header_oneof_eventType_present::eventType(v))
    }

    // repeated .com.alibaba.otter.canal.protocol.Pair props = 12;


    pub fn get_props(&self) -> &[Pair] {
        &self.props
    }
    pub fn clear_props(&mut self) {
        self.props.clear();
    }

    // Param is passed by value, moved
    pub fn set_props(&mut self, v: ::protobuf::RepeatedField<Pair>) {
        self.props = v;
    }

    // Mutable pointer to the field.
    pub fn mut_props(&mut self) -> &mut ::protobuf::RepeatedField<Pair> {
        &mut self.props
    }

    // Take field
    pub fn take_props(&mut self) -> ::protobuf::RepeatedField<Pair> {
        ::std::mem::replace(&mut self.props, ::protobuf::RepeatedField::new())
    }

    // string gtid = 13;


    pub fn get_gtid(&self) -> &str {
        &self.gtid
    }
    pub fn clear_gtid(&mut self) {
        self.gtid.clear();
    }

    // Param is passed by value, moved
    pub fn set_gtid(&mut self, v: ::std::string::String) {
        self.gtid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gtid(&mut self) -> &mut ::std::string::String {
        &mut self.gtid
    }

    // Take field
    pub fn take_gtid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gtid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Header {
    fn is_initialized(&self) -> bool {
        for v in &self.props {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.version_present = ::std::option::Option::Some(Header_oneof_version_present::version(is.read_int32()?));
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.logfileName)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.logfileOffset = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.serverId = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serverenCode)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.executeTime = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sourceType_present = ::std::option::Option::Some(Header_oneof_sourceType_present::sourceType(is.read_enum()?));
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schemaName)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tableName)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.eventLength = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.eventType_present = ::std::option::Option::Some(Header_oneof_eventType_present::eventType(is.read_enum()?));
                },
                12 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.props)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gtid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.logfileName.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.logfileName);
        }
        if self.logfileOffset != 0 {
            my_size += ::protobuf::rt::value_size(3, self.logfileOffset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.serverId != 0 {
            my_size += ::protobuf::rt::value_size(4, self.serverId, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.serverenCode.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.serverenCode);
        }
        if self.executeTime != 0 {
            my_size += ::protobuf::rt::value_size(6, self.executeTime, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.schemaName.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.schemaName);
        }
        if !self.tableName.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.tableName);
        }
        if self.eventLength != 0 {
            my_size += ::protobuf::rt::value_size(10, self.eventLength, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.props {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.gtid.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.gtid);
        }
        if let ::std::option::Option::Some(ref v) = self.version_present {
            match v {
                &Header_oneof_version_present::version(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.sourceType_present {
            match v {
                &Header_oneof_sourceType_present::sourceType(v) => {
                    my_size += ::protobuf::rt::enum_size(7, v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.eventType_present {
            match v {
                &Header_oneof_eventType_present::eventType(v) => {
                    my_size += ::protobuf::rt::enum_size(11, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.logfileName.is_empty() {
            os.write_string(2, &self.logfileName)?;
        }
        if self.logfileOffset != 0 {
            os.write_int64(3, self.logfileOffset)?;
        }
        if self.serverId != 0 {
            os.write_int64(4, self.serverId)?;
        }
        if !self.serverenCode.is_empty() {
            os.write_string(5, &self.serverenCode)?;
        }
        if self.executeTime != 0 {
            os.write_int64(6, self.executeTime)?;
        }
        if !self.schemaName.is_empty() {
            os.write_string(8, &self.schemaName)?;
        }
        if !self.tableName.is_empty() {
            os.write_string(9, &self.tableName)?;
        }
        if self.eventLength != 0 {
            os.write_int64(10, self.eventLength)?;
        }
        for v in &self.props {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.gtid.is_empty() {
            os.write_string(13, &self.gtid)?;
        }
        if let ::std::option::Option::Some(ref v) = self.version_present {
            match v {
                &Header_oneof_version_present::version(v) => {
                    os.write_int32(1, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.sourceType_present {
            match v {
                &Header_oneof_sourceType_present::sourceType(v) => {
                    os.write_enum(7, v.value())?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.eventType_present {
            match v {
                &Header_oneof_eventType_present::eventType(v) => {
                    os.write_enum(11, v.value())?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Header {
        Header::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                    "version",
                    Header::has_version,
                    Header::get_version,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "logfileName",
                    |m: &Header| { &m.logfileName },
                    |m: &mut Header| { &mut m.logfileName },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "logfileOffset",
                    |m: &Header| { &m.logfileOffset },
                    |m: &mut Header| { &mut m.logfileOffset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "serverId",
                    |m: &Header| { &m.serverId },
                    |m: &mut Header| { &mut m.serverId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "serverenCode",
                    |m: &Header| { &m.serverenCode },
                    |m: &mut Header| { &mut m.serverenCode },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "executeTime",
                    |m: &Header| { &m.executeTime },
                    |m: &mut Header| { &mut m.executeTime },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, Type>(
                    "sourceType",
                    Header::has_sourceType,
                    Header::get_sourceType,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "schemaName",
                    |m: &Header| { &m.schemaName },
                    |m: &mut Header| { &mut m.schemaName },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "tableName",
                    |m: &Header| { &m.tableName },
                    |m: &mut Header| { &mut m.tableName },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "eventLength",
                    |m: &Header| { &m.eventLength },
                    |m: &mut Header| { &mut m.eventLength },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, EventType>(
                    "eventType",
                    Header::has_eventType,
                    Header::get_eventType,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                    "props",
                    |m: &Header| { &m.props },
                    |m: &mut Header| { &mut m.props },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gtid",
                    |m: &Header| { &m.gtid },
                    |m: &mut Header| { &mut m.gtid },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Header>(
                    "Header",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Header {
        static mut instance: ::protobuf::lazy::Lazy<Header> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Header,
        };
        unsafe {
            instance.get(Header::new)
        }
    }
}

impl ::protobuf::Clear for Header {
    fn clear(&mut self) {
        self.version_present = ::std::option::Option::None;
        self.logfileName.clear();
        self.logfileOffset = 0;
        self.serverId = 0;
        self.serverenCode.clear();
        self.executeTime = 0;
        self.sourceType_present = ::std::option::Option::None;
        self.schemaName.clear();
        self.tableName.clear();
        self.eventLength = 0;
        self.eventType_present = ::std::option::Option::None;
        self.props.clear();
        self.gtid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Column {
    // message fields
    pub index: i32,
    pub sqlType: i32,
    pub name: ::std::string::String,
    pub isKey: bool,
    pub updated: bool,
    pub props: ::protobuf::RepeatedField<Pair>,
    pub value: ::std::string::String,
    pub length: i32,
    pub mysqlType: ::std::string::String,
    // message oneof groups
    pub isNull_present: ::std::option::Option<Column_oneof_isNull_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Column {
    fn default() -> &'a Column {
        <Column as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Column_oneof_isNull_present {
    isNull(bool),
}

impl Column {
    pub fn new() -> Column {
        ::std::default::Default::default()
    }

    // int32 index = 1;


    pub fn get_index(&self) -> i32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: i32) {
        self.index = v;
    }

    // int32 sqlType = 2;


    pub fn get_sqlType(&self) -> i32 {
        self.sqlType
    }
    pub fn clear_sqlType(&mut self) {
        self.sqlType = 0;
    }

    // Param is passed by value, moved
    pub fn set_sqlType(&mut self, v: i32) {
        self.sqlType = v;
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // bool isKey = 4;


    pub fn get_isKey(&self) -> bool {
        self.isKey
    }
    pub fn clear_isKey(&mut self) {
        self.isKey = false;
    }

    // Param is passed by value, moved
    pub fn set_isKey(&mut self, v: bool) {
        self.isKey = v;
    }

    // bool updated = 5;


    pub fn get_updated(&self) -> bool {
        self.updated
    }
    pub fn clear_updated(&mut self) {
        self.updated = false;
    }

    // Param is passed by value, moved
    pub fn set_updated(&mut self, v: bool) {
        self.updated = v;
    }

    // bool isNull = 6;


    pub fn get_isNull(&self) -> bool {
        match self.isNull_present {
            ::std::option::Option::Some(Column_oneof_isNull_present::isNull(v)) => v,
            _ => false,
        }
    }
    pub fn clear_isNull(&mut self) {
        self.isNull_present = ::std::option::Option::None;
    }

    pub fn has_isNull(&self) -> bool {
        match self.isNull_present {
            ::std::option::Option::Some(Column_oneof_isNull_present::isNull(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_isNull(&mut self, v: bool) {
        self.isNull_present = ::std::option::Option::Some(Column_oneof_isNull_present::isNull(v))
    }

    // repeated .com.alibaba.otter.canal.protocol.Pair props = 7;


    pub fn get_props(&self) -> &[Pair] {
        &self.props
    }
    pub fn clear_props(&mut self) {
        self.props.clear();
    }

    // Param is passed by value, moved
    pub fn set_props(&mut self, v: ::protobuf::RepeatedField<Pair>) {
        self.props = v;
    }

    // Mutable pointer to the field.
    pub fn mut_props(&mut self) -> &mut ::protobuf::RepeatedField<Pair> {
        &mut self.props
    }

    // Take field
    pub fn take_props(&mut self) -> ::protobuf::RepeatedField<Pair> {
        ::std::mem::replace(&mut self.props, ::protobuf::RepeatedField::new())
    }

    // string value = 8;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // int32 length = 9;


    pub fn get_length(&self) -> i32 {
        self.length
    }
    pub fn clear_length(&mut self) {
        self.length = 0;
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: i32) {
        self.length = v;
    }

    // string mysqlType = 10;


    pub fn get_mysqlType(&self) -> &str {
        &self.mysqlType
    }
    pub fn clear_mysqlType(&mut self) {
        self.mysqlType.clear();
    }

    // Param is passed by value, moved
    pub fn set_mysqlType(&mut self, v: ::std::string::String) {
        self.mysqlType = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mysqlType(&mut self) -> &mut ::std::string::String {
        &mut self.mysqlType
    }

    // Take field
    pub fn take_mysqlType(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mysqlType, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Column {
    fn is_initialized(&self) -> bool {
        for v in &self.props {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.sqlType = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isKey = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.updated = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.isNull_present = ::std::option::Option::Some(Column_oneof_isNull_present::isNull(is.read_bool()?));
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.props)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.length = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mysqlType)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sqlType != 0 {
            my_size += ::protobuf::rt::value_size(2, self.sqlType, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if self.isKey != false {
            my_size += 2;
        }
        if self.updated != false {
            my_size += 2;
        }
        for value in &self.props {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.value);
        }
        if self.length != 0 {
            my_size += ::protobuf::rt::value_size(9, self.length, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.mysqlType.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.mysqlType);
        }
        if let ::std::option::Option::Some(ref v) = self.isNull_present {
            match v {
                &Column_oneof_isNull_present::isNull(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_int32(1, self.index)?;
        }
        if self.sqlType != 0 {
            os.write_int32(2, self.sqlType)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if self.isKey != false {
            os.write_bool(4, self.isKey)?;
        }
        if self.updated != false {
            os.write_bool(5, self.updated)?;
        }
        for v in &self.props {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.value.is_empty() {
            os.write_string(8, &self.value)?;
        }
        if self.length != 0 {
            os.write_int32(9, self.length)?;
        }
        if !self.mysqlType.is_empty() {
            os.write_string(10, &self.mysqlType)?;
        }
        if let ::std::option::Option::Some(ref v) = self.isNull_present {
            match v {
                &Column_oneof_isNull_present::isNull(v) => {
                    os.write_bool(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Column {
        Column::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "index",
                    |m: &Column| { &m.index },
                    |m: &mut Column| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "sqlType",
                    |m: &Column| { &m.sqlType },
                    |m: &mut Column| { &mut m.sqlType },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Column| { &m.name },
                    |m: &mut Column| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isKey",
                    |m: &Column| { &m.isKey },
                    |m: &mut Column| { &mut m.isKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "updated",
                    |m: &Column| { &m.updated },
                    |m: &mut Column| { &mut m.updated },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                    "isNull",
                    Column::has_isNull,
                    Column::get_isNull,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                    "props",
                    |m: &Column| { &m.props },
                    |m: &mut Column| { &mut m.props },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &Column| { &m.value },
                    |m: &mut Column| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "length",
                    |m: &Column| { &m.length },
                    |m: &mut Column| { &mut m.length },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mysqlType",
                    |m: &Column| { &m.mysqlType },
                    |m: &mut Column| { &mut m.mysqlType },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Column>(
                    "Column",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Column {
        static mut instance: ::protobuf::lazy::Lazy<Column> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Column,
        };
        unsafe {
            instance.get(Column::new)
        }
    }
}

impl ::protobuf::Clear for Column {
    fn clear(&mut self) {
        self.index = 0;
        self.sqlType = 0;
        self.name.clear();
        self.isKey = false;
        self.updated = false;
        self.isNull_present = ::std::option::Option::None;
        self.props.clear();
        self.value.clear();
        self.length = 0;
        self.mysqlType.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Column {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Column {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RowData {
    // message fields
    pub beforeColumns: ::protobuf::RepeatedField<Column>,
    pub afterColumns: ::protobuf::RepeatedField<Column>,
    pub props: ::protobuf::RepeatedField<Pair>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RowData {
    fn default() -> &'a RowData {
        <RowData as ::protobuf::Message>::default_instance()
    }
}

impl RowData {
    pub fn new() -> RowData {
        ::std::default::Default::default()
    }

    // repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;


    pub fn get_beforeColumns(&self) -> &[Column] {
        &self.beforeColumns
    }
    pub fn clear_beforeColumns(&mut self) {
        self.beforeColumns.clear();
    }

    // Param is passed by value, moved
    pub fn set_beforeColumns(&mut self, v: ::protobuf::RepeatedField<Column>) {
        self.beforeColumns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_beforeColumns(&mut self) -> &mut ::protobuf::RepeatedField<Column> {
        &mut self.beforeColumns
    }

    // Take field
    pub fn take_beforeColumns(&mut self) -> ::protobuf::RepeatedField<Column> {
        ::std::mem::replace(&mut self.beforeColumns, ::protobuf::RepeatedField::new())
    }

    // repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;


    pub fn get_afterColumns(&self) -> &[Column] {
        &self.afterColumns
    }
    pub fn clear_afterColumns(&mut self) {
        self.afterColumns.clear();
    }

    // Param is passed by value, moved
    pub fn set_afterColumns(&mut self, v: ::protobuf::RepeatedField<Column>) {
        self.afterColumns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_afterColumns(&mut self) -> &mut ::protobuf::RepeatedField<Column> {
        &mut self.afterColumns
    }

    // Take field
    pub fn take_afterColumns(&mut self) -> ::protobuf::RepeatedField<Column> {
        ::std::mem::replace(&mut self.afterColumns, ::protobuf::RepeatedField::new())
    }

    // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;


    pub fn get_props(&self) -> &[Pair] {
        &self.props
    }
    pub fn clear_props(&mut self) {
        self.props.clear();
    }

    // Param is passed by value, moved
    pub fn set_props(&mut self, v: ::protobuf::RepeatedField<Pair>) {
        self.props = v;
    }

    // Mutable pointer to the field.
    pub fn mut_props(&mut self) -> &mut ::protobuf::RepeatedField<Pair> {
        &mut self.props
    }

    // Take field
    pub fn take_props(&mut self) -> ::protobuf::RepeatedField<Pair> {
        ::std::mem::replace(&mut self.props, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RowData {
    fn is_initialized(&self) -> bool {
        for v in &self.beforeColumns {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.afterColumns {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.props {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.beforeColumns)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.afterColumns)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.props)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.beforeColumns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.afterColumns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.props {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.beforeColumns {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.afterColumns {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.props {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RowData {
        RowData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Column>>(
                    "beforeColumns",
                    |m: &RowData| { &m.beforeColumns },
                    |m: &mut RowData| { &mut m.beforeColumns },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Column>>(
                    "afterColumns",
                    |m: &RowData| { &m.afterColumns },
                    |m: &mut RowData| { &mut m.afterColumns },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                    "props",
                    |m: &RowData| { &m.props },
                    |m: &mut RowData| { &mut m.props },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RowData>(
                    "RowData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RowData {
        static mut instance: ::protobuf::lazy::Lazy<RowData> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RowData,
        };
        unsafe {
            instance.get(RowData::new)
        }
    }
}

impl ::protobuf::Clear for RowData {
    fn clear(&mut self) {
        self.beforeColumns.clear();
        self.afterColumns.clear();
        self.props.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RowData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RowData {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RowChange {
    // message fields
    pub tableId: i64,
    pub sql: ::std::string::String,
    pub rowDatas: ::protobuf::RepeatedField<RowData>,
    pub props: ::protobuf::RepeatedField<Pair>,
    pub ddlSchemaName: ::std::string::String,
    // message oneof groups
    pub eventType_present: ::std::option::Option<RowChange_oneof_eventType_present>,
    pub isDdl_present: ::std::option::Option<RowChange_oneof_isDdl_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RowChange {
    fn default() -> &'a RowChange {
        <RowChange as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum RowChange_oneof_eventType_present {
    eventType(EventType),
}

#[derive(Clone,PartialEq,Debug)]
pub enum RowChange_oneof_isDdl_present {
    isDdl(bool),
}

impl RowChange {
    pub fn new() -> RowChange {
        ::std::default::Default::default()
    }

    // int64 tableId = 1;


    pub fn get_tableId(&self) -> i64 {
        self.tableId
    }
    pub fn clear_tableId(&mut self) {
        self.tableId = 0;
    }

    // Param is passed by value, moved
    pub fn set_tableId(&mut self, v: i64) {
        self.tableId = v;
    }

    // .com.alibaba.otter.canal.protocol.EventType eventType = 2;


    pub fn get_eventType(&self) -> EventType {
        match self.eventType_present {
            ::std::option::Option::Some(RowChange_oneof_eventType_present::eventType(v)) => v,
            _ => EventType::EVENTTYPECOMPATIBLEPROTO2,
        }
    }
    pub fn clear_eventType(&mut self) {
        self.eventType_present = ::std::option::Option::None;
    }

    pub fn has_eventType(&self) -> bool {
        match self.eventType_present {
            ::std::option::Option::Some(RowChange_oneof_eventType_present::eventType(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_eventType(&mut self, v: EventType) {
        self.eventType_present = ::std::option::Option::Some(RowChange_oneof_eventType_present::eventType(v))
    }

    // bool isDdl = 10;


    pub fn get_isDdl(&self) -> bool {
        match self.isDdl_present {
            ::std::option::Option::Some(RowChange_oneof_isDdl_present::isDdl(v)) => v,
            _ => false,
        }
    }
    pub fn clear_isDdl(&mut self) {
        self.isDdl_present = ::std::option::Option::None;
    }

    pub fn has_isDdl(&self) -> bool {
        match self.isDdl_present {
            ::std::option::Option::Some(RowChange_oneof_isDdl_present::isDdl(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_isDdl(&mut self, v: bool) {
        self.isDdl_present = ::std::option::Option::Some(RowChange_oneof_isDdl_present::isDdl(v))
    }

    // string sql = 11;


    pub fn get_sql(&self) -> &str {
        &self.sql
    }
    pub fn clear_sql(&mut self) {
        self.sql.clear();
    }

    // Param is passed by value, moved
    pub fn set_sql(&mut self, v: ::std::string::String) {
        self.sql = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sql(&mut self) -> &mut ::std::string::String {
        &mut self.sql
    }

    // Take field
    pub fn take_sql(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sql, ::std::string::String::new())
    }

    // repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;


    pub fn get_rowDatas(&self) -> &[RowData] {
        &self.rowDatas
    }
    pub fn clear_rowDatas(&mut self) {
        self.rowDatas.clear();
    }

    // Param is passed by value, moved
    pub fn set_rowDatas(&mut self, v: ::protobuf::RepeatedField<RowData>) {
        self.rowDatas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rowDatas(&mut self) -> &mut ::protobuf::RepeatedField<RowData> {
        &mut self.rowDatas
    }

    // Take field
    pub fn take_rowDatas(&mut self) -> ::protobuf::RepeatedField<RowData> {
        ::std::mem::replace(&mut self.rowDatas, ::protobuf::RepeatedField::new())
    }

    // repeated .com.alibaba.otter.canal.protocol.Pair props = 13;


    pub fn get_props(&self) -> &[Pair] {
        &self.props
    }
    pub fn clear_props(&mut self) {
        self.props.clear();
    }

    // Param is passed by value, moved
    pub fn set_props(&mut self, v: ::protobuf::RepeatedField<Pair>) {
        self.props = v;
    }

    // Mutable pointer to the field.
    pub fn mut_props(&mut self) -> &mut ::protobuf::RepeatedField<Pair> {
        &mut self.props
    }

    // Take field
    pub fn take_props(&mut self) -> ::protobuf::RepeatedField<Pair> {
        ::std::mem::replace(&mut self.props, ::protobuf::RepeatedField::new())
    }

    // string ddlSchemaName = 14;


    pub fn get_ddlSchemaName(&self) -> &str {
        &self.ddlSchemaName
    }
    pub fn clear_ddlSchemaName(&mut self) {
        self.ddlSchemaName.clear();
    }

    // Param is passed by value, moved
    pub fn set_ddlSchemaName(&mut self, v: ::std::string::String) {
        self.ddlSchemaName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ddlSchemaName(&mut self) -> &mut ::std::string::String {
        &mut self.ddlSchemaName
    }

    // Take field
    pub fn take_ddlSchemaName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ddlSchemaName, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RowChange {
    fn is_initialized(&self) -> bool {
        for v in &self.rowDatas {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.props {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tableId = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.eventType_present = ::std::option::Option::Some(RowChange_oneof_eventType_present::eventType(is.read_enum()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.isDdl_present = ::std::option::Option::Some(RowChange_oneof_isDdl_present::isDdl(is.read_bool()?));
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sql)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rowDatas)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.props)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ddlSchemaName)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tableId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.tableId, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sql.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.sql);
        }
        for value in &self.rowDatas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.props {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.ddlSchemaName.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.ddlSchemaName);
        }
        if let ::std::option::Option::Some(ref v) = self.eventType_present {
            match v {
                &RowChange_oneof_eventType_present::eventType(v) => {
                    my_size += ::protobuf::rt::enum_size(2, v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.isDdl_present {
            match v {
                &RowChange_oneof_isDdl_present::isDdl(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tableId != 0 {
            os.write_int64(1, self.tableId)?;
        }
        if !self.sql.is_empty() {
            os.write_string(11, &self.sql)?;
        }
        for v in &self.rowDatas {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.props {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.ddlSchemaName.is_empty() {
            os.write_string(14, &self.ddlSchemaName)?;
        }
        if let ::std::option::Option::Some(ref v) = self.eventType_present {
            match v {
                &RowChange_oneof_eventType_present::eventType(v) => {
                    os.write_enum(2, v.value())?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.isDdl_present {
            match v {
                &RowChange_oneof_isDdl_present::isDdl(v) => {
                    os.write_bool(10, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RowChange {
        RowChange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tableId",
                    |m: &RowChange| { &m.tableId },
                    |m: &mut RowChange| { &mut m.tableId },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, EventType>(
                    "eventType",
                    RowChange::has_eventType,
                    RowChange::get_eventType,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                    "isDdl",
                    RowChange::has_isDdl,
                    RowChange::get_isDdl,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sql",
                    |m: &RowChange| { &m.sql },
                    |m: &mut RowChange| { &mut m.sql },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RowData>>(
                    "rowDatas",
                    |m: &RowChange| { &m.rowDatas },
                    |m: &mut RowChange| { &mut m.rowDatas },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                    "props",
                    |m: &RowChange| { &m.props },
                    |m: &mut RowChange| { &mut m.props },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ddlSchemaName",
                    |m: &RowChange| { &m.ddlSchemaName },
                    |m: &mut RowChange| { &mut m.ddlSchemaName },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RowChange>(
                    "RowChange",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RowChange {
        static mut instance: ::protobuf::lazy::Lazy<RowChange> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RowChange,
        };
        unsafe {
            instance.get(RowChange::new)
        }
    }
}

impl ::protobuf::Clear for RowChange {
    fn clear(&mut self) {
        self.tableId = 0;
        self.eventType_present = ::std::option::Option::None;
        self.isDdl_present = ::std::option::Option::None;
        self.sql.clear();
        self.rowDatas.clear();
        self.props.clear();
        self.ddlSchemaName.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RowChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RowChange {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionBegin {
    // message fields
    pub executeTime: i64,
    pub transactionId: ::std::string::String,
    pub props: ::protobuf::RepeatedField<Pair>,
    pub threadId: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionBegin {
    fn default() -> &'a TransactionBegin {
        <TransactionBegin as ::protobuf::Message>::default_instance()
    }
}

impl TransactionBegin {
    pub fn new() -> TransactionBegin {
        ::std::default::Default::default()
    }

    // int64 executeTime = 1;


    pub fn get_executeTime(&self) -> i64 {
        self.executeTime
    }
    pub fn clear_executeTime(&mut self) {
        self.executeTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_executeTime(&mut self, v: i64) {
        self.executeTime = v;
    }

    // string transactionId = 2;


    pub fn get_transactionId(&self) -> &str {
        &self.transactionId
    }
    pub fn clear_transactionId(&mut self) {
        self.transactionId.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactionId(&mut self, v: ::std::string::String) {
        self.transactionId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transactionId(&mut self) -> &mut ::std::string::String {
        &mut self.transactionId
    }

    // Take field
    pub fn take_transactionId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.transactionId, ::std::string::String::new())
    }

    // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;


    pub fn get_props(&self) -> &[Pair] {
        &self.props
    }
    pub fn clear_props(&mut self) {
        self.props.clear();
    }

    // Param is passed by value, moved
    pub fn set_props(&mut self, v: ::protobuf::RepeatedField<Pair>) {
        self.props = v;
    }

    // Mutable pointer to the field.
    pub fn mut_props(&mut self) -> &mut ::protobuf::RepeatedField<Pair> {
        &mut self.props
    }

    // Take field
    pub fn take_props(&mut self) -> ::protobuf::RepeatedField<Pair> {
        ::std::mem::replace(&mut self.props, ::protobuf::RepeatedField::new())
    }

    // int64 threadId = 4;


    pub fn get_threadId(&self) -> i64 {
        self.threadId
    }
    pub fn clear_threadId(&mut self) {
        self.threadId = 0;
    }

    // Param is passed by value, moved
    pub fn set_threadId(&mut self, v: i64) {
        self.threadId = v;
    }
}

impl ::protobuf::Message for TransactionBegin {
    fn is_initialized(&self) -> bool {
        for v in &self.props {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.executeTime = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.transactionId)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.props)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.threadId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.executeTime != 0 {
            my_size += ::protobuf::rt::value_size(1, self.executeTime, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.transactionId.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.transactionId);
        }
        for value in &self.props {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.threadId != 0 {
            my_size += ::protobuf::rt::value_size(4, self.threadId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.executeTime != 0 {
            os.write_int64(1, self.executeTime)?;
        }
        if !self.transactionId.is_empty() {
            os.write_string(2, &self.transactionId)?;
        }
        for v in &self.props {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.threadId != 0 {
            os.write_int64(4, self.threadId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionBegin {
        TransactionBegin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "executeTime",
                    |m: &TransactionBegin| { &m.executeTime },
                    |m: &mut TransactionBegin| { &mut m.executeTime },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "transactionId",
                    |m: &TransactionBegin| { &m.transactionId },
                    |m: &mut TransactionBegin| { &mut m.transactionId },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                    "props",
                    |m: &TransactionBegin| { &m.props },
                    |m: &mut TransactionBegin| { &mut m.props },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "threadId",
                    |m: &TransactionBegin| { &m.threadId },
                    |m: &mut TransactionBegin| { &mut m.threadId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionBegin>(
                    "TransactionBegin",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionBegin {
        static mut instance: ::protobuf::lazy::Lazy<TransactionBegin> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionBegin,
        };
        unsafe {
            instance.get(TransactionBegin::new)
        }
    }
}

impl ::protobuf::Clear for TransactionBegin {
    fn clear(&mut self) {
        self.executeTime = 0;
        self.transactionId.clear();
        self.props.clear();
        self.threadId = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionBegin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionBegin {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionEnd {
    // message fields
    pub executeTime: i64,
    pub transactionId: ::std::string::String,
    pub props: ::protobuf::RepeatedField<Pair>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionEnd {
    fn default() -> &'a TransactionEnd {
        <TransactionEnd as ::protobuf::Message>::default_instance()
    }
}

impl TransactionEnd {
    pub fn new() -> TransactionEnd {
        ::std::default::Default::default()
    }

    // int64 executeTime = 1;


    pub fn get_executeTime(&self) -> i64 {
        self.executeTime
    }
    pub fn clear_executeTime(&mut self) {
        self.executeTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_executeTime(&mut self, v: i64) {
        self.executeTime = v;
    }

    // string transactionId = 2;


    pub fn get_transactionId(&self) -> &str {
        &self.transactionId
    }
    pub fn clear_transactionId(&mut self) {
        self.transactionId.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactionId(&mut self, v: ::std::string::String) {
        self.transactionId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transactionId(&mut self) -> &mut ::std::string::String {
        &mut self.transactionId
    }

    // Take field
    pub fn take_transactionId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.transactionId, ::std::string::String::new())
    }

    // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;


    pub fn get_props(&self) -> &[Pair] {
        &self.props
    }
    pub fn clear_props(&mut self) {
        self.props.clear();
    }

    // Param is passed by value, moved
    pub fn set_props(&mut self, v: ::protobuf::RepeatedField<Pair>) {
        self.props = v;
    }

    // Mutable pointer to the field.
    pub fn mut_props(&mut self) -> &mut ::protobuf::RepeatedField<Pair> {
        &mut self.props
    }

    // Take field
    pub fn take_props(&mut self) -> ::protobuf::RepeatedField<Pair> {
        ::std::mem::replace(&mut self.props, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TransactionEnd {
    fn is_initialized(&self) -> bool {
        for v in &self.props {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.executeTime = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.transactionId)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.props)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.executeTime != 0 {
            my_size += ::protobuf::rt::value_size(1, self.executeTime, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.transactionId.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.transactionId);
        }
        for value in &self.props {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.executeTime != 0 {
            os.write_int64(1, self.executeTime)?;
        }
        if !self.transactionId.is_empty() {
            os.write_string(2, &self.transactionId)?;
        }
        for v in &self.props {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionEnd {
        TransactionEnd::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "executeTime",
                    |m: &TransactionEnd| { &m.executeTime },
                    |m: &mut TransactionEnd| { &mut m.executeTime },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "transactionId",
                    |m: &TransactionEnd| { &m.transactionId },
                    |m: &mut TransactionEnd| { &mut m.transactionId },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                    "props",
                    |m: &TransactionEnd| { &m.props },
                    |m: &mut TransactionEnd| { &mut m.props },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionEnd>(
                    "TransactionEnd",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionEnd {
        static mut instance: ::protobuf::lazy::Lazy<TransactionEnd> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionEnd,
        };
        unsafe {
            instance.get(TransactionEnd::new)
        }
    }
}

impl ::protobuf::Clear for TransactionEnd {
    fn clear(&mut self) {
        self.executeTime = 0;
        self.transactionId.clear();
        self.props.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionEnd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionEnd {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Pair {
    // message fields
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Pair {
    fn default() -> &'a Pair {
        <Pair as ::protobuf::Message>::default_instance()
    }
}

impl Pair {
    pub fn new() -> Pair {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Pair {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Pair {
        Pair::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &Pair| { &m.key },
                    |m: &mut Pair| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &Pair| { &m.value },
                    |m: &mut Pair| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Pair>(
                    "Pair",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Pair {
        static mut instance: ::protobuf::lazy::Lazy<Pair> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Pair,
        };
        unsafe {
            instance.get(Pair::new)
        }
    }
}

impl ::protobuf::Clear for Pair {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Pair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Pair {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EntryType {
    ENTRYTYPECOMPATIBLEPROTO2 = 0,
    TRANSACTIONBEGIN = 1,
    ROWDATA = 2,
    TRANSACTIONEND = 3,
    HEARTBEAT = 4,
    GTIDLOG = 5,
}

impl ::protobuf::ProtobufEnum for EntryType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EntryType> {
        match value {
            0 => ::std::option::Option::Some(EntryType::ENTRYTYPECOMPATIBLEPROTO2),
            1 => ::std::option::Option::Some(EntryType::TRANSACTIONBEGIN),
            2 => ::std::option::Option::Some(EntryType::ROWDATA),
            3 => ::std::option::Option::Some(EntryType::TRANSACTIONEND),
            4 => ::std::option::Option::Some(EntryType::HEARTBEAT),
            5 => ::std::option::Option::Some(EntryType::GTIDLOG),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EntryType] = &[
            EntryType::ENTRYTYPECOMPATIBLEPROTO2,
            EntryType::TRANSACTIONBEGIN,
            EntryType::ROWDATA,
            EntryType::TRANSACTIONEND,
            EntryType::HEARTBEAT,
            EntryType::GTIDLOG,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("EntryType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for EntryType {
}

impl ::std::default::Default for EntryType {
    fn default() -> Self {
        EntryType::ENTRYTYPECOMPATIBLEPROTO2
    }
}

impl ::protobuf::reflect::ProtobufValue for EntryType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EventType {
    EVENTTYPECOMPATIBLEPROTO2 = 0,
    INSERT = 1,
    UPDATE = 2,
    DELETE = 3,
    CREATE = 4,
    ALTER = 5,
    ERASE = 6,
    QUERY = 7,
    TRUNCATE = 8,
    RENAME = 9,
    CINDEX = 10,
    DINDEX = 11,
    GTID = 12,
    XACOMMIT = 13,
    XAROLLBACK = 14,
    MHEARTBEAT = 15,
}

impl ::protobuf::ProtobufEnum for EventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventType> {
        match value {
            0 => ::std::option::Option::Some(EventType::EVENTTYPECOMPATIBLEPROTO2),
            1 => ::std::option::Option::Some(EventType::INSERT),
            2 => ::std::option::Option::Some(EventType::UPDATE),
            3 => ::std::option::Option::Some(EventType::DELETE),
            4 => ::std::option::Option::Some(EventType::CREATE),
            5 => ::std::option::Option::Some(EventType::ALTER),
            6 => ::std::option::Option::Some(EventType::ERASE),
            7 => ::std::option::Option::Some(EventType::QUERY),
            8 => ::std::option::Option::Some(EventType::TRUNCATE),
            9 => ::std::option::Option::Some(EventType::RENAME),
            10 => ::std::option::Option::Some(EventType::CINDEX),
            11 => ::std::option::Option::Some(EventType::DINDEX),
            12 => ::std::option::Option::Some(EventType::GTID),
            13 => ::std::option::Option::Some(EventType::XACOMMIT),
            14 => ::std::option::Option::Some(EventType::XAROLLBACK),
            15 => ::std::option::Option::Some(EventType::MHEARTBEAT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EventType] = &[
            EventType::EVENTTYPECOMPATIBLEPROTO2,
            EventType::INSERT,
            EventType::UPDATE,
            EventType::DELETE,
            EventType::CREATE,
            EventType::ALTER,
            EventType::ERASE,
            EventType::QUERY,
            EventType::TRUNCATE,
            EventType::RENAME,
            EventType::CINDEX,
            EventType::DINDEX,
            EventType::GTID,
            EventType::XACOMMIT,
            EventType::XAROLLBACK,
            EventType::MHEARTBEAT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("EventType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for EventType {
}

impl ::std::default::Default for EventType {
    fn default() -> Self {
        EventType::EVENTTYPECOMPATIBLEPROTO2
    }
}

impl ::protobuf::reflect::ProtobufValue for EventType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Type {
    TYPECOMPATIBLEPROTO2 = 0,
    ORACLE = 1,
    MYSQL = 2,
    PGSQL = 3,
}

impl ::protobuf::ProtobufEnum for Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Type> {
        match value {
            0 => ::std::option::Option::Some(Type::TYPECOMPATIBLEPROTO2),
            1 => ::std::option::Option::Some(Type::ORACLE),
            2 => ::std::option::Option::Some(Type::MYSQL),
            3 => ::std::option::Option::Some(Type::PGSQL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Type] = &[
            Type::TYPECOMPATIBLEPROTO2,
            Type::ORACLE,
            Type::MYSQL,
            Type::PGSQL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Type", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Type {
}

impl ::std::default::Default for Type {
    fn default() -> Self {
        Type::TYPECOMPATIBLEPROTO2
    }
}

impl ::protobuf::reflect::ProtobufValue for Type {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13EntryProtocol.proto\x12\x20com.alibaba.otter.canal.protocol\"\xcb\
    \x01\n\x05Entry\x12@\n\x06header\x18\x01\x20\x01(\x0b2(.com.alibaba.otte\
    r.canal.protocol.HeaderR\x06header\x12K\n\tentryType\x18\x02\x20\x01(\
    \x0e2+.com.alibaba.otter.canal.protocol.EntryTypeH\0R\tentryType\x12\x1e\
    \n\nstoreValue\x18\x03\x20\x01(\x0cR\nstoreValueB\x13\n\x11entryType_pre\
    sent\"\xd5\x04\n\x06Header\x12\x1a\n\x07version\x18\x01\x20\x01(\x05H\0R\
    \x07version\x12\x20\n\x0blogfileName\x18\x02\x20\x01(\tR\x0blogfileName\
    \x12$\n\rlogfileOffset\x18\x03\x20\x01(\x03R\rlogfileOffset\x12\x1a\n\
    \x08serverId\x18\x04\x20\x01(\x03R\x08serverId\x12\"\n\x0cserverenCode\
    \x18\x05\x20\x01(\tR\x0cserverenCode\x12\x20\n\x0bexecuteTime\x18\x06\
    \x20\x01(\x03R\x0bexecuteTime\x12H\n\nsourceType\x18\x07\x20\x01(\x0e2&.\
    com.alibaba.otter.canal.protocol.TypeH\x01R\nsourceType\x12\x1e\n\nschem\
    aName\x18\x08\x20\x01(\tR\nschemaName\x12\x1c\n\ttableName\x18\t\x20\x01\
    (\tR\ttableName\x12\x20\n\x0beventLength\x18\n\x20\x01(\x03R\x0beventLen\
    gth\x12K\n\teventType\x18\x0b\x20\x01(\x0e2+.com.alibaba.otter.canal.pro\
    tocol.EventTypeH\x02R\teventType\x12<\n\x05props\x18\x0c\x20\x03(\x0b2&.\
    com.alibaba.otter.canal.protocol.PairR\x05props\x12\x12\n\x04gtid\x18\r\
    \x20\x01(\tR\x04gtidB\x11\n\x0fversion_presentB\x14\n\x12sourceType_pres\
    entB\x13\n\x11eventType_present\"\xb2\x02\n\x06Column\x12\x14\n\x05index\
    \x18\x01\x20\x01(\x05R\x05index\x12\x18\n\x07sqlType\x18\x02\x20\x01(\
    \x05R\x07sqlType\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\x12\x14\n\
    \x05isKey\x18\x04\x20\x01(\x08R\x05isKey\x12\x18\n\x07updated\x18\x05\
    \x20\x01(\x08R\x07updated\x12\x18\n\x06isNull\x18\x06\x20\x01(\x08H\0R\
    \x06isNull\x12<\n\x05props\x18\x07\x20\x03(\x0b2&.com.alibaba.otter.cana\
    l.protocol.PairR\x05props\x12\x14\n\x05value\x18\x08\x20\x01(\tR\x05valu\
    e\x12\x16\n\x06length\x18\t\x20\x01(\x05R\x06length\x12\x1c\n\tmysqlType\
    \x18\n\x20\x01(\tR\tmysqlTypeB\x10\n\x0eisNull_present\"\xe5\x01\n\x07Ro\
    wData\x12N\n\rbeforeColumns\x18\x01\x20\x03(\x0b2(.com.alibaba.otter.can\
    al.protocol.ColumnR\rbeforeColumns\x12L\n\x0cafterColumns\x18\x02\x20\
    \x03(\x0b2(.com.alibaba.otter.canal.protocol.ColumnR\x0cafterColumns\x12\
    <\n\x05props\x18\x03\x20\x03(\x0b2&.com.alibaba.otter.canal.protocol.Pai\
    rR\x05props\"\xed\x02\n\tRowChange\x12\x18\n\x07tableId\x18\x01\x20\x01(\
    \x03R\x07tableId\x12K\n\teventType\x18\x02\x20\x01(\x0e2+.com.alibaba.ot\
    ter.canal.protocol.EventTypeH\0R\teventType\x12\x16\n\x05isDdl\x18\n\x20\
    \x01(\x08H\x01R\x05isDdl\x12\x10\n\x03sql\x18\x0b\x20\x01(\tR\x03sql\x12\
    E\n\x08rowDatas\x18\x0c\x20\x03(\x0b2).com.alibaba.otter.canal.protocol.\
    RowDataR\x08rowDatas\x12<\n\x05props\x18\r\x20\x03(\x0b2&.com.alibaba.ot\
    ter.canal.protocol.PairR\x05props\x12$\n\rddlSchemaName\x18\x0e\x20\x01(\
    \tR\rddlSchemaNameB\x13\n\x11eventType_presentB\x0f\n\risDdl_present\"\
    \xb4\x01\n\x10TransactionBegin\x12\x20\n\x0bexecuteTime\x18\x01\x20\x01(\
    \x03R\x0bexecuteTime\x12$\n\rtransactionId\x18\x02\x20\x01(\tR\rtransact\
    ionId\x12<\n\x05props\x18\x03\x20\x03(\x0b2&.com.alibaba.otter.canal.pro\
    tocol.PairR\x05props\x12\x1a\n\x08threadId\x18\x04\x20\x01(\x03R\x08thre\
    adId\"\x96\x01\n\x0eTransactionEnd\x12\x20\n\x0bexecuteTime\x18\x01\x20\
    \x01(\x03R\x0bexecuteTime\x12$\n\rtransactionId\x18\x02\x20\x01(\tR\rtra\
    nsactionId\x12<\n\x05props\x18\x03\x20\x03(\x0b2&.com.alibaba.otter.cana\
    l.protocol.PairR\x05props\".\n\x04Pair\x12\x10\n\x03key\x18\x01\x20\x01(\
    \tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value*}\n\tEntryTyp\
    e\x12\x1d\n\x19ENTRYTYPECOMPATIBLEPROTO2\x10\0\x12\x14\n\x10TRANSACTIONB\
    EGIN\x10\x01\x12\x0b\n\x07ROWDATA\x10\x02\x12\x12\n\x0eTRANSACTIONEND\
    \x10\x03\x12\r\n\tHEARTBEAT\x10\x04\x12\x0b\n\x07GTIDLOG\x10\x05*\xe5\
    \x01\n\tEventType\x12\x1d\n\x19EVENTTYPECOMPATIBLEPROTO2\x10\0\x12\n\n\
    \x06INSERT\x10\x01\x12\n\n\x06UPDATE\x10\x02\x12\n\n\x06DELETE\x10\x03\
    \x12\n\n\x06CREATE\x10\x04\x12\t\n\x05ALTER\x10\x05\x12\t\n\x05ERASE\x10\
    \x06\x12\t\n\x05QUERY\x10\x07\x12\x0c\n\x08TRUNCATE\x10\x08\x12\n\n\x06R\
    ENAME\x10\t\x12\n\n\x06CINDEX\x10\n\x12\n\n\x06DINDEX\x10\x0b\x12\x08\n\
    \x04GTID\x10\x0c\x12\x0c\n\x08XACOMMIT\x10\r\x12\x0e\n\nXAROLLBACK\x10\
    \x0e\x12\x0e\n\nMHEARTBEAT\x10\x0f*B\n\x04Type\x12\x18\n\x14TYPECOMPATIB\
    LEPROTO2\x10\0\x12\n\n\x06ORACLE\x10\x01\x12\t\n\x05MYSQL\x10\x02\x12\t\
    \n\x05PGSQL\x10\x03B0\n\x20com.alibaba.otter.canal.protocolB\nCanalEntry\
    H\x01J\xc16\n\x07\x12\x05\0\0\xe5\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x01\x08(\n\x08\n\x01\x08\x12\x03\x03\09\n\t\
    \n\x02\x08\x01\x12\x03\x03\09\n\x08\n\x01\x08\x12\x03\x04\0+\n\t\n\x02\
    \x08\x08\x12\x03\x04\0+\n\x08\n\x01\x08\x12\x03\x05\0\x1c\n\t\n\x02\x08\
    \t\x12\x03\x05\0\x1c\n\xe5\x01\n\x02\x04\0\x12\x04\x0b\0\x15\x01\x1a\xd8\
    \x01***************************************************************\n\
    \x20message\x20model\n\xe5\xa6\x82\xe6\x9e\x9c\xe8\xa6\x81\xe5\x9c\xa8En\
    um\xe4\xb8\xad\xe6\x96\xb0\xe5\xa2\x9e\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\
    \x8c\xe7\xa1\xae\xe4\xbf\x9d\xe4\xbb\xa5\xe5\x89\x8d\xe7\x9a\x84\xe7\xb1\
    \xbb\xe5\x9e\x8b\xe7\x9a\x84\xe4\xb8\x8b\xe6\xa0\x87\xe5\x80\xbc\xe4\xb8\
    \x8d\xe5\x8f\x98.\n*****************************************************\
    *********\n\n\n\x03\x04\0\x01\x12\x03\x0b\x08\r\n!\n\x04\x04\0\x02\0\x12\
    \x03\r\x05\\\x1a\x14*\xe5\x8d\x8f\xe8\xae\xae\xe5\xa4\xb4\xe9\x83\xa8\
    \xe4\xbf\xa1\xe6\x81\xaf*\n\r\n\x05\x04\0\x02\0\x04\x12\x04\r\x05\x0b\
    \x0f\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\r\x05\x0b\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\r8>\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\rZ[\nA\n\x04\x04\
    \0\x08\0\x12\x04\x0f\x08\x11\t\x1a3/**\xe6\x89\x93\xe6\x95\xa3\xe5\x90\
    \x8e\xe7\x9a\x84\xe4\xba\x8b\xe4\xbb\xb6\xe7\xb1\xbb\xe5\x9e\x8b**/\x20[\
    default\x20=\x20ROWDATA]\n\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x0f\x0e\
    \x1f\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x10\x10d\n\x0c\n\x05\x04\0\x02\
    \x01\x06\x12\x03\x10\x10\x19\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x10@I\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x10bc\n'\n\x04\x04\0\x02\x02\x12\
    \x03\x14\x08\\\x1a\x1a*\xe4\xbc\xa0\xe8\xbe\x93\xe7\x9a\x84\xe4\xba\x8c\
    \xe8\xbf\x9b\xe5\x88\xb6\xe6\x95\xb0\xe7\xbb\x84*\n\r\n\x05\x04\0\x02\
    \x02\x04\x12\x04\x14\x08\x11\t\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x14\
    \x08\r\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x148B\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03\x14Z[\n2\n\x02\x04\x01\x12\x04\x18\0H\x01\x1a\x10*messa\
    ge\x20Header*\"\x14*\xe5\x8d\x8f\xe8\xae\xae\xe7\x9a\x84\xe7\x89\x88\xe6\
    \x9c\xac\xe5\x8f\xb7*\n\n\n\x03\x04\x01\x01\x12\x03\x18\x08\x0e\n\x1c\n\
    \x04\x04\x01\x08\0\x12\x04\x1a\x08\x1c\t\x1a\x0e[default\x20=\x201]\n\n\
    \x0c\n\x05\x04\x01\x08\0\x01\x12\x03\x1a\x0e\x1d\n\x0b\n\x04\x04\x01\x02\
    \0\x12\x03\x1b\x10\\\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1b\x10\x15\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1b8?\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x1bZ[\n'\n\x04\x04\x01\x02\x01\x12\x03\x20\x08T\x1a\x1a*binlog/\
    redolog\x20\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d*\n\r\n\x05\x04\x01\x02\
    \x01\x04\x12\x04\x20\x08\x1c\t\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\
    \x20\x08\x0e\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x200;\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x20RS\n3\n\x04\x04\x01\x02\x02\x12\x03#\x08\
    L\x1a&*binlog/redolog\x20\xe6\x96\x87\xe4\xbb\xb6\xe7\x9a\x84\xe5\x81\
    \x8f\xe7\xa7\xbb\xe4\xbd\x8d\xe7\xbd\xae*\n\r\n\x05\x04\x01\x02\x02\x04\
    \x12\x04#\x08\x20T\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03#\x08\r\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03#0=\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03#JK\n\x20\n\x04\x04\x01\x02\x03\x12\x03&\x08D\x1a\x13*\xe6\x9c\
    \x8d\xe5\x8a\xa1\xe7\xab\xafserverId*\n\r\n\x05\x04\x01\x02\x03\x04\x12\
    \x04&\x08#L\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03&\x08\r\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x03&(0\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03&\
    BC\n&\n\x04\x04\x01\x02\x04\x12\x03)\x08L\x1a\x19*\x20\xe5\x8f\x98\xe6\
    \x9b\xb4\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe7\xbc\x96\xe7\xa0\x81\x20\
    *\n\r\n\x05\x04\x01\x02\x04\x04\x12\x04)\x08&D\n\x0c\n\x05\x04\x01\x02\
    \x04\x05\x12\x03)\x08\x0e\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03)0<\n\
    \x0c\n\x05\x04\x01\x02\x04\x03\x12\x03)JK\n+\n\x04\x04\x01\x02\x05\x12\
    \x03,\x08T\x1a\x1e*\xe5\x8f\x98\xe6\x9b\xb4\xe6\x95\xb0\xe6\x8d\xae\xe7\
    \x9a\x84\xe6\x89\xa7\xe8\xa1\x8c\xe6\x97\xb6\xe9\x97\xb4\x20*\n\r\n\x05\
    \x04\x01\x02\x05\x04\x12\x04,\x08)L\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\
    \x03,\x08\r\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03,0;\n\x0c\n\x05\x04\
    \x01\x02\x05\x03\x12\x03,RS\n:\n\x04\x04\x01\x08\x01\x12\x04/\x081\t\x1a\
    \x12[default\x20=\x20MYSQL]\n2\x18*\x20\xe5\x8f\x98\xe6\x9b\xb4\xe6\x95\
    \xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x9d\xa5\xe6\xba\x90*\n\x0c\n\x05\x04\
    \x01\x08\x01\x01\x12\x03/\x0e\x20\n\x0b\n\x04\x04\x01\x02\x06\x12\x030\
    \x10\\\n\x0c\n\x05\x04\x01\x02\x06\x06\x12\x030\x10\x14\n\x0c\n\x05\x04\
    \x01\x02\x06\x01\x12\x0308B\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x030Z[\n\
    )\n\x04\x04\x01\x02\x07\x12\x035\x08T\x1a\x1c*\x20\xe5\x8f\x98\xe6\x9b\
    \xb4\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84schemaname*\n\r\n\x05\x04\x01\
    \x02\x07\x04\x12\x045\x081\t\n\x0c\n\x05\x04\x01\x02\x07\x05\x12\x035\
    \x08\x0e\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\x0350:\n\x0c\n\x05\x04\x01\
    \x02\x07\x03\x12\x035RS\n'\n\x04\x04\x01\x02\x08\x12\x038\x08T\x1a\x1a*\
    \xe5\x8f\x98\xe6\x9b\xb4\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84tablename*\n\
    \r\n\x05\x04\x01\x02\x08\x04\x12\x048\x085T\n\x0c\n\x05\x04\x01\x02\x08\
    \x05\x12\x038\x08\x0e\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x03809\n\x0c\n\
    \x05\x04\x01\x02\x08\x03\x12\x038RS\n#\n\x04\x04\x01\x02\t\x12\x03;\x08I\
    \x1a\x16*\xe6\xaf\x8f\xe4\xb8\xaaevent\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\
    \xa6*\n\r\n\x05\x04\x01\x02\t\x04\x12\x04;\x088T\n\x0c\n\x05\x04\x01\x02\
    \t\x05\x12\x03;\x08\r\n\x0c\n\x05\x04\x01\x02\t\x01\x12\x03;0;\n\x0c\n\
    \x05\x04\x01\x02\t\x03\x12\x03;FH\n8\n\x04\x04\x01\x08\x02\x12\x04>\x08@\
    \t\x1a\x14\x20[default\x20=\x20UPDATE]\n2\x14*\xe6\x95\xb0\xe6\x8d\xae\
    \xe5\x8f\x98\xe6\x9b\xb4\xe7\xb1\xbb\xe5\x9e\x8b*\n\x0c\n\x05\x04\x01\
    \x08\x02\x01\x12\x03>\x0e\x1f\n\x0b\n\x04\x04\x01\x02\n\x12\x03?\x10]\n\
    \x0c\n\x05\x04\x01\x02\n\x06\x12\x03?\x10\x19\n\x0c\n\x05\x04\x01\x02\n\
    \x01\x12\x03?8A\n\x0c\n\x05\x04\x01\x02\n\x03\x12\x03?Z\\\n\x1b\n\x04\
    \x04\x01\x02\x0b\x12\x03D\x08]\x1a\x0e*\xe9\xa2\x84\xe7\x95\x99\xe6\x89\
    \xa9\xe5\xb1\x95*\n\x0c\n\x05\x04\x01\x02\x0b\x04\x12\x03D\x08\x10\n\x0c\
    \n\x05\x04\x01\x02\x0b\x06\x12\x03D\x11\x15\n\x0c\n\x05\x04\x01\x02\x0b\
    \x01\x12\x03D8=\n\x0c\n\x05\x04\x01\x02\x0b\x03\x12\x03DZ\\\n\"\n\x04\
    \x04\x01\x02\x0c\x12\x03G\x088\x1a\x15*\xe5\xbd\x93\xe5\x89\x8d\xe4\xba\
    \x8b\xe5\x8a\xa1\xe7\x9a\x84gitd*\n\r\n\x05\x04\x01\x02\x0c\x04\x12\x04G\
    \x08D]\n\x0c\n\x05\x04\x01\x02\x0c\x05\x12\x03G\x08\x0e\n\x0c\n\x05\x04\
    \x01\x02\x0c\x01\x12\x03G\x1f#\n\x0c\n\x05\x04\x01\x02\x0c\x03\x12\x03G5\
    7\n)\n\x02\x04\x02\x12\x04K\0l\x01\x1a\x1d*\xe6\xaf\x8f\xe4\xb8\xaa\xe5\
    \xad\x97\xe6\xae\xb5\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x93\xe6\
    \x9e\x84*\n\n\n\x03\x04\x02\x01\x12\x03K\x08\x0e\n\x1b\n\x04\x04\x02\x02\
    \0\x12\x03M\x08B\x1a\x0e*\xe5\xad\x97\xe6\xae\xb5\xe4\xb8\x8b\xe6\xa0\
    \x87*\n\r\n\x05\x04\x02\x02\0\x04\x12\x04M\x08K\x10\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03M\x08\r\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03M\x18\x1d\
    \n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03M@A\n\"\n\x04\x04\x02\x02\x01\x12\
    \x03P\x08B\x1a\x15*\xe5\xad\x97\xe6\xae\xb5java\xe4\xb8\xad\xe7\xb1\xbb\
    \xe5\x9e\x8b*\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04P\x08MB\n\x0c\n\x05\
    \x04\x02\x02\x01\x05\x12\x03P\x08\r\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03P\x18\x1f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03P@A\nF\n\x04\x04\
    \x02\x02\x02\x12\x03S\x08B\x1a9*\xe5\xad\x97\xe6\xae\xb5\xe5\x90\x8d\xe7\
    \xa7\xb0(\xe5\xbf\xbd\xe7\x95\xa5\xe5\xa4\xa7\xe5\xb0\x8f\xe5\x86\x99)\
    \xef\xbc\x8c\xe5\x9c\xa8mysql\xe4\xb8\xad\xe6\x98\xaf\xe6\xb2\xa1\xe6\
    \x9c\x89\xe7\x9a\x84*\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04S\x08PB\n\x0c\
    \n\x05\x04\x02\x02\x02\x05\x12\x03S\x08\x0e\n\x0c\n\x05\x04\x02\x02\x02\
    \x01\x12\x03S\x18\x1c\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03S@A\n\x1e\n\
    \x04\x04\x02\x02\x03\x12\x03V\x08B\x1a\x11*\xe6\x98\xaf\xe5\x90\xa6\xe6\
    \x98\xaf\xe4\xb8\xbb\xe9\x94\xae*\n\r\n\x05\x04\x02\x02\x03\x04\x12\x04V\
    \x08SB\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03V\x08\x0c\n\x0c\n\x05\x04\
    \x02\x02\x03\x01\x12\x03V\x18\x1d\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\
    \x03V@A\nP\n\x04\x04\x02\x02\x04\x12\x03Y\x08B\x1aC*\xe5\xa6\x82\xe6\x9e\
    \x9cEventType=UPDATE,\xe7\x94\xa8\xe4\xba\x8e\xe6\xa0\x87\xe8\xaf\x86\
    \xe8\xbf\x99\xe4\xb8\xaa\xe5\xad\x97\xe6\xae\xb5\xe5\x80\xbc\xe6\x98\xaf\
    \xe5\x90\xa6\xe6\x9c\x89\xe4\xbf\xae\xe6\x94\xb9*\n\r\n\x05\x04\x02\x02\
    \x04\x04\x12\x04Y\x08VB\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03Y\x08\x0c\
    \n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03Y\x18\x1f\n\x0c\n\x05\x04\x02\
    \x02\x04\x03\x12\x03Y@A\n9\n\x04\x04\x02\x08\0\x12\x04\\\x08^\t\x1a\x12[\
    default\x20=\x20false]\n2\x17*\x20\xe6\xa0\x87\xe8\xaf\x86\xe6\x98\xaf\
    \xe5\x90\xa6\xe4\xb8\xba\xe7\xa9\xba\x20\x20*\n\x0c\n\x05\x04\x02\x08\0\
    \x01\x12\x03\\\x0e\x1c\n\x0b\n\x04\x04\x02\x02\x05\x12\x03]\x10J\n\x0c\n\
    \x05\x04\x02\x02\x05\x05\x12\x03]\x10\x14\n\x0c\n\x05\x04\x02\x02\x05\
    \x01\x12\x03]\x20&\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03]HI\n\x1b\n\
    \x04\x04\x02\x02\x06\x12\x03b\x08J\x1a\x0e*\xe9\xa2\x84\xe7\x95\x99\xe6\
    \x89\xa9\xe5\xb1\x95*\n\x0c\n\x05\x04\x02\x02\x06\x04\x12\x03b\x08\x10\n\
    \x0c\n\x05\x04\x02\x02\x06\x06\x12\x03b\x11\x15\n\x0c\n\x05\x04\x02\x02\
    \x06\x01\x12\x03b\x20%\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03bHI\nK\n\
    \x04\x04\x02\x02\x07\x12\x03e\x08B\x1a>*\x20\xe5\xad\x97\xe6\xae\xb5\xe5\
    \x80\xbc,timestamp,Datetime\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe6\x97\
    \xb6\xe9\x97\xb4\xe6\xa0\xbc\xe5\xbc\x8f\xe7\x9a\x84\xe6\x96\x87\xe6\x9c\
    \xac\x20*\n\r\n\x05\x04\x02\x02\x07\x04\x12\x04e\x08bJ\n\x0c\n\x05\x04\
    \x02\x02\x07\x05\x12\x03e\x08\x0e\n\x0c\n\x05\x04\x02\x02\x07\x01\x12\
    \x03e\x18\x1d\n\x0c\n\x05\x04\x02\x02\x07\x03\x12\x03e@A\n/\n\x04\x04\
    \x02\x02\x08\x12\x03h\x08B\x1a\"*\x20\xe5\xaf\xb9\xe5\xba\x94\xe6\x95\
    \xb0\xe6\x8d\xae\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x8e\x9f\xe5\xa7\x8b\xe9\x95\
    \xbf\xe5\xba\xa6\x20*\n\r\n\x05\x04\x02\x02\x08\x04\x12\x04h\x08eB\n\x0c\
    \n\x05\x04\x02\x02\x08\x05\x12\x03h\x08\r\n\x0c\n\x05\x04\x02\x02\x08\
    \x01\x12\x03h\x18\x1e\n\x0c\n\x05\x04\x02\x02\x08\x03\x12\x03h@A\n\x20\n\
    \x04\x04\x02\x02\t\x12\x03k\x08C\x1a\x13*\xe5\xad\x97\xe6\xae\xb5mysql\
    \xe7\xb1\xbb\xe5\x9e\x8b*\n\r\n\x05\x04\x02\x02\t\x04\x12\x04k\x08hB\n\
    \x0c\n\x05\x04\x02\x02\t\x05\x12\x03k\x08\x0e\n\x0c\n\x05\x04\x02\x02\t\
    \x01\x12\x03k\x18!\n\x0c\n\x05\x04\x02\x02\t\x03\x12\x03k@B\n\n\n\x02\
    \x04\x03\x12\x04n\0x\x01\n\n\n\x03\x04\x03\x01\x12\x03n\x08\x0f\nA\n\x04\
    \x04\x03\x02\0\x12\x03q\x08J\x1a4*\x20\xe5\xad\x97\xe6\xae\xb5\xe4\xbf\
    \xa1\xe6\x81\xaf\xef\xbc\x8c\xe5\xa2\x9e\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\
    \xae(\xe4\xbf\xae\xe6\x94\xb9\xe5\x89\x8d,\xe5\x88\xa0\xe9\x99\xa4\xe5\
    \x89\x8d)\x20*\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03q\x08\x10\n\x0c\n\
    \x05\x04\x03\x02\0\x06\x12\x03q\x11\x17\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03q(5\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03qHI\nB\n\x04\x04\x03\
    \x02\x01\x12\x03t\x08J\x1a5*\x20\xe5\xad\x97\xe6\xae\xb5\xe4\xbf\xa1\xe6\
    \x81\xaf\xef\xbc\x8c\xe5\xa2\x9e\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae(\
    \xe4\xbf\xae\xe6\x94\xb9\xe5\x90\x8e,\xe6\x96\xb0\xe5\xa2\x9e\xe5\x90\
    \x8e)\x20\x20*\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03t\x08\x10\n\x0c\n\
    \x05\x04\x03\x02\x01\x06\x12\x03t\x11\x17\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03t(4\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03tHI\n\x1b\n\x04\
    \x04\x03\x02\x02\x12\x03w\x08R\x1a\x0e*\xe9\xa2\x84\xe7\x95\x99\xe6\x89\
    \xa9\xe5\xb1\x95*\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03w\x08\x10\n\x0c\
    \n\x05\x04\x03\x02\x02\x06\x12\x03w\x11\x15\n\x0c\n\x05\x04\x03\x02\x02\
    \x01\x12\x03w(-\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03wPQ\n<\n\x02\x04\
    \x04\x12\x05{\0\x98\x01\x01\x1a/*message\x20row\x20\xe6\xaf\x8f\xe8\xa1\
    \x8c\xe5\x8f\x98\xe6\x9b\xb4\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\
    \xb0\xe6\x8d\xae\xe7\xbb\x93\xe6\x9e\x84*\n\n\n\x03\x04\x04\x01\x12\x03{\
    \x08\x11\n)\n\x04\x04\x04\x02\0\x12\x03~\x08J\x1a\x1c*tableId,\xe7\x94\
    \xb1\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe4\xba\xa7\xe7\x94\x9f*\n\r\n\
    \x05\x04\x04\x02\0\x04\x12\x04~\x08{\x13\n\x0c\n\x05\x04\x04\x02\0\x05\
    \x12\x03~\x08\r\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03~\x20'\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x03~HI\n9\n\x04\x04\x04\x08\0\x12\x06\x82\x01\x08\
    \x84\x01\t\x1a\x13[default\x20=\x20UPDATE]\n2\x14*\xe6\x95\xb0\xe6\x8d\
    \xae\xe5\x8f\x98\xe6\x9b\xb4\xe7\xb1\xbb\xe5\x9e\x8b*\n\r\n\x05\x04\x04\
    \x08\0\x01\x12\x04\x82\x01\x0e\x1f\n\x0c\n\x04\x04\x04\x02\x01\x12\x04\
    \x83\x01\x10R\n\r\n\x05\x04\x04\x02\x01\x06\x12\x04\x83\x01\x10\x19\n\r\
    \n\x05\x04\x04\x02\x01\x01\x12\x04\x83\x01(1\n\r\n\x05\x04\x04\x02\x01\
    \x03\x12\x04\x83\x01PQ\nB\n\x04\x04\x04\x08\x01\x12\x06\x88\x01\x08\x8a\
    \x01\t\x1a\x13\x20[default\x20=\x20false]\n2\x1d*\x20\xe6\xa0\x87\xe8\
    \xaf\x86\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xafddl\xe8\xaf\xad\xe5\x8f\xa5\
    \x20\x20*\n\r\n\x05\x04\x04\x08\x01\x01\x12\x04\x88\x01\x0e\x1b\n\x0c\n\
    \x04\x04\x04\x02\x02\x12\x04\x89\x01\x10S\n\r\n\x05\x04\x04\x02\x02\x05\
    \x12\x04\x89\x01\x10\x14\n\r\n\x05\x04\x04\x02\x02\x01\x12\x04\x89\x01(-\
    \n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\x89\x01PR\n(\n\x04\x04\x04\x02\
    \x03\x12\x04\x8e\x01\x08K\x1a\x1a*\x20ddl/query\xe7\x9a\x84sql\xe8\xaf\
    \xad\xe5\x8f\xa5\x20\x20*\n\x0f\n\x05\x04\x04\x02\x03\x04\x12\x06\x8e\
    \x01\x08\x8a\x01\t\n\r\n\x05\x04\x04\x02\x03\x05\x12\x04\x8e\x01\x08\x0e\
    \n\r\n\x05\x04\x04\x02\x03\x01\x12\x04\x8e\x01\x20#\n\r\n\x05\x04\x04\
    \x02\x03\x03\x12\x04\x8e\x01HJ\n:\n\x04\x04\x04\x02\x04\x12\x04\x91\x01\
    \x08S\x1a,*\x20\xe4\xb8\x80\xe6\xac\xa1\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\
    \x93\xe5\x8f\x98\xe6\x9b\xb4\xe5\x8f\xaf\xe8\x83\xbd\xe5\xad\x98\xe5\x9c\
    \xa8\xe5\xa4\x9a\xe8\xa1\x8c\x20\x20*\n\r\n\x05\x04\x04\x02\x04\x04\x12\
    \x04\x91\x01\x08\x10\n\r\n\x05\x04\x04\x02\x04\x06\x12\x04\x91\x01\x11\
    \x18\n\r\n\x05\x04\x04\x02\x04\x01\x12\x04\x91\x01(0\n\r\n\x05\x04\x04\
    \x02\x04\x03\x12\x04\x91\x01PR\n\x1c\n\x04\x04\x04\x02\x05\x12\x04\x94\
    \x01\x08S\x1a\x0e*\xe9\xa2\x84\xe7\x95\x99\xe6\x89\xa9\xe5\xb1\x95*\n\r\
    \n\x05\x04\x04\x02\x05\x04\x12\x04\x94\x01\x08\x10\n\r\n\x05\x04\x04\x02\
    \x05\x06\x12\x04\x94\x01\x11\x15\n\r\n\x05\x04\x04\x02\x05\x01\x12\x04\
    \x94\x01(-\n\r\n\x05\x04\x04\x02\x05\x03\x12\x04\x94\x01PR\ni\n\x04\x04\
    \x04\x02\x06\x12\x04\x97\x01\x08C\x1a[*\x20ddl/query\xe7\x9a\x84schemaNa\
    me\xef\xbc\x8c\xe4\xbc\x9a\xe5\xad\x98\xe5\x9c\xa8\xe8\xb7\xa8\xe5\xba\
    \x93ddl\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe4\xbf\x9d\xe7\x95\x99\xe6\
    \x89\xa7\xe8\xa1\x8cddl\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8dschemaName\
    \x20\x20*\n\x0f\n\x05\x04\x04\x02\x06\x04\x12\x06\x97\x01\x08\x94\x01S\n\
    \r\n\x05\x04\x04\x02\x06\x05\x12\x04\x97\x01\x08\x0e\n\r\n\x05\x04\x04\
    \x02\x06\x01\x12\x04\x97\x01\x20-\n\r\n\x05\x04\x04\x02\x06\x03\x12\x04\
    \x97\x01@B\n+\n\x02\x04\x05\x12\x06\x9b\x01\0\xa8\x01\x01\x1a\x1d*\xe5\
    \xbc\x80\xe5\xa7\x8b\xe4\xba\x8b\xe5\x8a\xa1\xe7\x9a\x84\xe4\xb8\x80\xe4\
    \xba\x9b\xe4\xbf\xa1\xe6\x81\xaf*\n\x0b\n\x03\x04\x05\x01\x12\x04\x9b\
    \x01\x08\x18\n<\n\x04\x04\x05\x02\0\x12\x04\x9e\x01\x08J\x1a.*\xe5\xb7\
    \xb2\xe5\xba\x9f\xe5\xbc\x83\xef\xbc\x8c\xe8\xaf\xb7\xe4\xbd\xbf\xe7\x94\
    \xa8header\xe9\x87\x8c\xe7\x9a\x84executeTime*\n\x0f\n\x05\x04\x05\x02\0\
    \x04\x12\x06\x9e\x01\x08\x9b\x01\x19\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\
    \x9e\x01\x08\r\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\x9e\x01\x20+\n\r\n\
    \x05\x04\x05\x02\0\x03\x12\x04\x9e\x01HI\n5\n\x04\x04\x05\x02\x01\x12\
    \x04\xa1\x01\x08B\x1a'*\xe5\xb7\xb2\xe5\xba\x9f\xe5\xbc\x83\xef\xbc\x8cB\
    egin\xe9\x87\x8c\xe4\xb8\x8d\xe6\x8f\x90\xe4\xbe\x9b\xe4\xba\x8b\xe5\x8a\
    \xa1id*\n\x0f\n\x05\x04\x05\x02\x01\x04\x12\x06\xa1\x01\x08\x9e\x01J\n\r\
    \n\x05\x04\x05\x02\x01\x05\x12\x04\xa1\x01\x08\x0e\n\r\n\x05\x04\x05\x02\
    \x01\x01\x12\x04\xa1\x01\x20-\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\xa1\
    \x01@A\n\x1c\n\x04\x04\x05\x02\x02\x12\x04\xa4\x01\x08R\x1a\x0e*\xe9\xa2\
    \x84\xe7\x95\x99\xe6\x89\xa9\xe5\xb1\x95*\n\r\n\x05\x04\x05\x02\x02\x04\
    \x12\x04\xa4\x01\x08\x10\n\r\n\x05\x04\x05\x02\x02\x06\x12\x04\xa4\x01\
    \x11\x15\n\r\n\x05\x04\x05\x02\x02\x01\x12\x04\xa4\x01(-\n\r\n\x05\x04\
    \x05\x02\x02\x03\x12\x04\xa4\x01PQ\n\"\n\x04\x04\x05\x02\x03\x12\x04\xa7\
    \x01\x08J\x1a\x14*\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84thread\x20Id*\n\
    \x0f\n\x05\x04\x05\x02\x03\x04\x12\x06\xa7\x01\x08\xa4\x01R\n\r\n\x05\
    \x04\x05\x02\x03\x05\x12\x04\xa7\x01\x08\r\n\r\n\x05\x04\x05\x02\x03\x01\
    \x12\x04\xa7\x01\x20(\n\r\n\x05\x04\x05\x02\x03\x03\x12\x04\xa7\x01HI\n+\
    \n\x02\x04\x06\x12\x06\xab\x01\0\xb5\x01\x01\x1a\x1d*\xe7\xbb\x93\xe6\
    \x9d\x9f\xe4\xba\x8b\xe5\x8a\xa1\xe7\x9a\x84\xe4\xb8\x80\xe4\xba\x9b\xe4\
    \xbf\xa1\xe6\x81\xaf*\n\x0b\n\x03\x04\x06\x01\x12\x04\xab\x01\x08\x16\n<\
    \n\x04\x04\x06\x02\0\x12\x04\xae\x01\x08J\x1a.*\xe5\xb7\xb2\xe5\xba\x9f\
    \xe5\xbc\x83\xef\xbc\x8c\xe8\xaf\xb7\xe4\xbd\xbf\xe7\x94\xa8header\xe9\
    \x87\x8c\xe7\x9a\x84executeTime*\n\x0f\n\x05\x04\x06\x02\0\x04\x12\x06\
    \xae\x01\x08\xab\x01\x17\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\xae\x01\x08\
    \r\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xae\x01\x20+\n\r\n\x05\x04\x06\
    \x02\0\x03\x12\x04\xae\x01HI\n\x19\n\x04\x04\x06\x02\x01\x12\x04\xb1\x01\
    \x08B\x1a\x0b*\xe4\xba\x8b\xe5\x8a\xa1\xe5\x8f\xb7*\n\x0f\n\x05\x04\x06\
    \x02\x01\x04\x12\x06\xb1\x01\x08\xae\x01J\n\r\n\x05\x04\x06\x02\x01\x05\
    \x12\x04\xb1\x01\x08\x0e\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\xb1\x01\
    \x20-\n\r\n\x05\x04\x06\x02\x01\x03\x12\x04\xb1\x01@A\n\x1c\n\x04\x04\
    \x06\x02\x02\x12\x04\xb4\x01\x08R\x1a\x0e*\xe9\xa2\x84\xe7\x95\x99\xe6\
    \x89\xa9\xe5\xb1\x95*\n\r\n\x05\x04\x06\x02\x02\x04\x12\x04\xb4\x01\x08\
    \x10\n\r\n\x05\x04\x06\x02\x02\x06\x12\x04\xb4\x01\x11\x15\n\r\n\x05\x04\
    \x06\x02\x02\x01\x12\x04\xb4\x01(-\n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\
    \xb4\x01PQ\n\x1c\n\x02\x04\x07\x12\x06\xb8\x01\0\xbb\x01\x01\x1a\x0e*\
    \xe9\xa2\x84\xe7\x95\x99\xe6\x89\xa9\xe5\xb1\x95*\n\x0b\n\x03\x04\x07\
    \x01\x12\x04\xb8\x01\x08\x0c\n\x0c\n\x04\x04\x07\x02\0\x12\x04\xb9\x01\
    \x08R\n\x0f\n\x05\x04\x07\x02\0\x04\x12\x06\xb9\x01\x08\xb8\x01\r\n\r\n\
    \x05\x04\x07\x02\0\x05\x12\x04\xb9\x01\x08\x0e\n\r\n\x05\x04\x07\x02\0\
    \x01\x12\x04\xb9\x01\x18\x1b\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xb9\x01\
    PQ\n\x0c\n\x04\x04\x07\x02\x01\x12\x04\xba\x01\x08J\n\x0f\n\x05\x04\x07\
    \x02\x01\x04\x12\x06\xba\x01\x08\xb9\x01R\n\r\n\x05\x04\x07\x02\x01\x05\
    \x12\x04\xba\x01\x08\x0e\n\r\n\x05\x04\x07\x02\x01\x01\x12\x04\xba\x01\
    \x18\x1d\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\xba\x01HI\nd\n\x02\x05\0\
    \x12\x06\xbe\x01\0\xc6\x01\x01\x1aV*\xe6\x89\x93\xe6\x95\xa3\xe5\x90\x8e\
    \xe7\x9a\x84\xe4\xba\x8b\xe4\xbb\xb6\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\
    \xe4\xb8\xbb\xe8\xa6\x81\xe7\x94\xa8\xe4\xba\x8e\xe6\xa0\x87\xe8\xaf\x86\
    \xe4\xba\x8b\xe5\x8a\xa1\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\
    \xe5\x8f\x98\xe6\x9b\xb4\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\xbb\x93\
    \xe6\x9d\x9f*\n\x0b\n\x03\x05\0\x01\x12\x04\xbe\x01\x05\x0e\n\x0c\n\x04\
    \x05\0\x02\0\x12\x04\xbf\x01\x08&\n\r\n\x05\x05\0\x02\0\x01\x12\x04\xbf\
    \x01\x08!\n\r\n\x05\x05\0\x02\0\x02\x12\x04\xbf\x01$%\n\x0c\n\x04\x05\0\
    \x02\x01\x12\x04\xc0\x01\x08:\n\r\n\x05\x05\0\x02\x01\x01\x12\x04\xc0\
    \x01\x08\x18\n\r\n\x05\x05\0\x02\x01\x02\x12\x04\xc0\x0189\n\x0c\n\x04\
    \x05\0\x02\x02\x12\x04\xc1\x01\x08B\n\r\n\x05\x05\0\x02\x02\x01\x12\x04\
    \xc1\x01\x08\x0f\n\r\n\x05\x05\0\x02\x02\x02\x12\x04\xc1\x01@A\n\x0c\n\
    \x04\x05\0\x02\x03\x12\x04\xc2\x01\x08:\n\r\n\x05\x05\0\x02\x03\x01\x12\
    \x04\xc2\x01\x08\x16\n\r\n\x05\x05\0\x02\x03\x02\x12\x04\xc2\x0189\nN\n\
    \x04\x05\0\x02\x04\x12\x04\xc4\x01\x08B\x1a@*\x20\xe5\xbf\x83\xe8\xb7\
    \xb3\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xbd\
    \xbf\xe7\x94\xa8\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe6\x9a\x82\xe4\xb8\
    \x8d\xe5\x8f\xaf\xe8\xa7\x81\xef\xbc\x8c\xe5\x8f\xaf\xe5\xbf\xbd\xe7\x95\
    \xa5\x20*\n\r\n\x05\x05\0\x02\x04\x01\x12\x04\xc4\x01\x08\x11\n\r\n\x05\
    \x05\0\x02\x04\x02\x12\x04\xc4\x01@A\n\x0c\n\x04\x05\0\x02\x05\x12\x04\
    \xc5\x01\x08*\n\r\n\x05\x05\0\x02\x05\x01\x12\x04\xc5\x01\x08\x0f\n\r\n\
    \x05\x05\0\x02\x05\x02\x12\x04\xc5\x01()\n\x1e\n\x02\x05\x01\x12\x06\xc9\
    \x01\0\xdd\x01\x01\x1a\x10*\x20\xe4\xba\x8b\xe4\xbb\xb6\xe7\xb1\xbb\xe5\
    \x9e\x8b\x20*\n\x0b\n\x03\x05\x01\x01\x12\x04\xc9\x01\x05\x0e\n\x0c\n\
    \x04\x05\x01\x02\0\x12\x04\xca\x01\x08&\n\r\n\x05\x05\x01\x02\0\x01\x12\
    \x04\xca\x01\x08!\n\r\n\x05\x05\x01\x02\0\x02\x12\x04\xca\x01$%\n\x0c\n\
    \x04\x05\x01\x02\x01\x12\x04\xcb\x01\x04*\n\r\n\x05\x05\x01\x02\x01\x01\
    \x12\x04\xcb\x01\x04\n\n\r\n\x05\x05\x01\x02\x01\x02\x12\x04\xcb\x01()\n\
    \x0c\n\x04\x05\x01\x02\x02\x12\x04\xcc\x01\x04*\n\r\n\x05\x05\x01\x02\
    \x02\x01\x12\x04\xcc\x01\x04\n\n\r\n\x05\x05\x01\x02\x02\x02\x12\x04\xcc\
    \x01()\n\x0c\n\x04\x05\x01\x02\x03\x12\x04\xcd\x01\x04*\n\r\n\x05\x05\
    \x01\x02\x03\x01\x12\x04\xcd\x01\x04\n\n\r\n\x05\x05\x01\x02\x03\x02\x12\
    \x04\xcd\x01()\n\x0c\n\x04\x05\x01\x02\x04\x12\x04\xce\x01\x04*\n\r\n\
    \x05\x05\x01\x02\x04\x01\x12\x04\xce\x01\x04\n\n\r\n\x05\x05\x01\x02\x04\
    \x02\x12\x04\xce\x01()\n\x0c\n\x04\x05\x01\x02\x05\x12\x04\xcf\x01\x04*\
    \n\r\n\x05\x05\x01\x02\x05\x01\x12\x04\xcf\x01\x04\t\n\r\n\x05\x05\x01\
    \x02\x05\x02\x12\x04\xcf\x01()\n\x0c\n\x04\x05\x01\x02\x06\x12\x04\xd0\
    \x01\x04*\n\r\n\x05\x05\x01\x02\x06\x01\x12\x04\xd0\x01\x04\t\n\r\n\x05\
    \x05\x01\x02\x06\x02\x12\x04\xd0\x01()\n\x0c\n\x04\x05\x01\x02\x07\x12\
    \x04\xd1\x01\x04*\n\r\n\x05\x05\x01\x02\x07\x01\x12\x04\xd1\x01\x04\t\n\
    \r\n\x05\x05\x01\x02\x07\x02\x12\x04\xd1\x01()\n\x0c\n\x04\x05\x01\x02\
    \x08\x12\x04\xd2\x01\x04\"\n\r\n\x05\x05\x01\x02\x08\x01\x12\x04\xd2\x01\
    \x04\x0c\n\r\n\x05\x05\x01\x02\x08\x02\x12\x04\xd2\x01\x20!\n\x0c\n\x04\
    \x05\x01\x02\t\x12\x04\xd3\x01\x04*\n\r\n\x05\x05\x01\x02\t\x01\x12\x04\
    \xd3\x01\x04\n\n\r\n\x05\x05\x01\x02\t\x02\x12\x04\xd3\x01()\n\x1c\n\x04\
    \x05\x01\x02\n\x12\x04\xd5\x01\x04+\x1a\x0e*CREATE\x20INDEX*\n\r\n\x05\
    \x05\x01\x02\n\x01\x12\x04\xd5\x01\x04\n\n\r\n\x05\x05\x01\x02\n\x02\x12\
    \x04\xd5\x01(*\n\x0c\n\x04\x05\x01\x02\x0b\x12\x04\xd6\x01\x04+\n\r\n\
    \x05\x05\x01\x02\x0b\x01\x12\x04\xd6\x01\x04\n\n\r\n\x05\x05\x01\x02\x0b\
    \x02\x12\x04\xd6\x01(*\n\x0c\n\x04\x05\x01\x02\x0c\x12\x04\xd7\x01\x04\
    \x1b\n\r\n\x05\x05\x01\x02\x0c\x01\x12\x04\xd7\x01\x04\x08\n\r\n\x05\x05\
    \x01\x02\x0c\x02\x12\x04\xd7\x01\x18\x1a\n\x14\n\x04\x05\x01\x02\r\x12\
    \x04\xd9\x01\x04\x1b\x1a\x06*\x20XA\x20*\n\r\n\x05\x05\x01\x02\r\x01\x12\
    \x04\xd9\x01\x04\x0c\n\r\n\x05\x05\x01\x02\r\x02\x12\x04\xd9\x01\x18\x1a\
    \n\x0c\n\x04\x05\x01\x02\x0e\x12\x04\xda\x01\x04#\n\r\n\x05\x05\x01\x02\
    \x0e\x01\x12\x04\xda\x01\x04\x0e\n\r\n\x05\x05\x01\x02\x0e\x02\x12\x04\
    \xda\x01\x20\"\n\"\n\x04\x05\x01\x02\x0f\x12\x04\xdc\x01\x04\x1b\x1a\x14\
    *\x20MASTER\x20HEARTBEAT\x20*\n\r\n\x05\x05\x01\x02\x0f\x01\x12\x04\xdc\
    \x01\x04\x0e\n\r\n\x05\x05\x01\x02\x0f\x02\x12\x04\xdc\x01\x18\x1a\n\x1f\
    \n\x02\x05\x02\x12\x06\xe0\x01\0\xe5\x01\x01\x1a\x11*\xe6\x95\xb0\xe6\
    \x8d\xae\xe5\xba\x93\xe7\xb1\xbb\xe5\x9e\x8b*\n\x0b\n\x03\x05\x02\x01\
    \x12\x04\xe0\x01\x05\t\n\x0c\n\x04\x05\x02\x02\0\x12\x04\xe1\x01\x08!\n\
    \r\n\x05\x05\x02\x02\0\x01\x12\x04\xe1\x01\x08\x1c\n\r\n\x05\x05\x02\x02\
    \0\x02\x12\x04\xe1\x01\x1f\x20\n\x0c\n\x04\x05\x02\x02\x01\x12\x04\xe2\
    \x01\x04*\n\r\n\x05\x05\x02\x02\x01\x01\x12\x04\xe2\x01\x04\n\n\r\n\x05\
    \x05\x02\x02\x01\x02\x12\x04\xe2\x01()\n\x0c\n\x04\x05\x02\x02\x02\x12\
    \x04\xe3\x01\x04*\n\r\n\x05\x05\x02\x02\x02\x01\x12\x04\xe3\x01\x04\t\n\
    \r\n\x05\x05\x02\x02\x02\x02\x12\x04\xe3\x01()\n\x0c\n\x04\x05\x02\x02\
    \x03\x12\x04\xe4\x01\x04*\n\r\n\x05\x05\x02\x02\x03\x01\x12\x04\xe4\x01\
    \x04\t\n\r\n\x05\x05\x02\x02\x03\x02\x12\x04\xe4\x01()b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
