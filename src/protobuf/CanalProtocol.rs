// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `CanalProtocol.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Packet {
    // message fields
    pub field_type: PacketType,
    pub body: ::std::vec::Vec<u8>,
    // message oneof groups
    pub magic_number_present: ::std::option::Option<Packet_oneof_magic_number_present>,
    pub version_present: ::std::option::Option<Packet_oneof_version_present>,
    pub compression_present: ::std::option::Option<Packet_oneof_compression_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Packet {
    fn default() -> &'a Packet {
        <Packet as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Packet_oneof_magic_number_present {
    magic_number(i32),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Packet_oneof_version_present {
    version(i32),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Packet_oneof_compression_present {
    compression(Compression),
}

impl Packet {
    pub fn new() -> Packet {
        ::std::default::Default::default()
    }

    // int32 magic_number = 1;


    pub fn get_magic_number(&self) -> i32 {
        match self.magic_number_present {
            ::std::option::Option::Some(Packet_oneof_magic_number_present::magic_number(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_magic_number(&mut self) {
        self.magic_number_present = ::std::option::Option::None;
    }

    pub fn has_magic_number(&self) -> bool {
        match self.magic_number_present {
            ::std::option::Option::Some(Packet_oneof_magic_number_present::magic_number(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_magic_number(&mut self, v: i32) {
        self.magic_number_present = ::std::option::Option::Some(Packet_oneof_magic_number_present::magic_number(v))
    }

    // int32 version = 2;


    pub fn get_version(&self) -> i32 {
        match self.version_present {
            ::std::option::Option::Some(Packet_oneof_version_present::version(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_version(&mut self) {
        self.version_present = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        match self.version_present {
            ::std::option::Option::Some(Packet_oneof_version_present::version(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version_present = ::std::option::Option::Some(Packet_oneof_version_present::version(v))
    }

    // .com.alibaba.otter.canal.protocol.PacketType type = 3;


    pub fn get_field_type(&self) -> PacketType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = PacketType::PACKAGETYPECOMPATIBLEPROTO2;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: PacketType) {
        self.field_type = v;
    }

    // .com.alibaba.otter.canal.protocol.Compression compression = 4;


    pub fn get_compression(&self) -> Compression {
        match self.compression_present {
            ::std::option::Option::Some(Packet_oneof_compression_present::compression(v)) => v,
            _ => Compression::COMPRESSIONCOMPATIBLEPROTO2,
        }
    }
    pub fn clear_compression(&mut self) {
        self.compression_present = ::std::option::Option::None;
    }

    pub fn has_compression(&self) -> bool {
        match self.compression_present {
            ::std::option::Option::Some(Packet_oneof_compression_present::compression(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_compression(&mut self, v: Compression) {
        self.compression_present = ::std::option::Option::Some(Packet_oneof_compression_present::compression(v))
    }

    // bytes body = 5;


    pub fn get_body(&self) -> &[u8] {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.body, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Packet {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.magic_number_present = ::std::option::Option::Some(Packet_oneof_magic_number_present::magic_number(is.read_int32()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.version_present = ::std::option::Option::Some(Packet_oneof_version_present::version(is.read_int32()?));
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.compression_present = ::std::option::Option::Some(Packet_oneof_compression_present::compression(is.read_enum()?));
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != PacketType::PACKAGETYPECOMPATIBLEPROTO2 {
            my_size += ::protobuf::rt::enum_size(3, self.field_type);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.body);
        }
        if let ::std::option::Option::Some(ref v) = self.magic_number_present {
            match v {
                &Packet_oneof_magic_number_present::magic_number(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.version_present {
            match v {
                &Packet_oneof_version_present::version(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.compression_present {
            match v {
                &Packet_oneof_compression_present::compression(v) => {
                    my_size += ::protobuf::rt::enum_size(4, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != PacketType::PACKAGETYPECOMPATIBLEPROTO2 {
            os.write_enum(3, self.field_type.value())?;
        }
        if !self.body.is_empty() {
            os.write_bytes(5, &self.body)?;
        }
        if let ::std::option::Option::Some(ref v) = self.magic_number_present {
            match v {
                &Packet_oneof_magic_number_present::magic_number(v) => {
                    os.write_int32(1, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.version_present {
            match v {
                &Packet_oneof_version_present::version(v) => {
                    os.write_int32(2, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.compression_present {
            match v {
                &Packet_oneof_compression_present::compression(v) => {
                    os.write_enum(4, v.value())?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Packet {
        Packet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                    "magic_number",
                    Packet::has_magic_number,
                    Packet::get_magic_number,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                    "version",
                    Packet::has_version,
                    Packet::get_version,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PacketType>>(
                    "type",
                    |m: &Packet| { &m.field_type },
                    |m: &mut Packet| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, Compression>(
                    "compression",
                    Packet::has_compression,
                    Packet::get_compression,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "body",
                    |m: &Packet| { &m.body },
                    |m: &mut Packet| { &mut m.body },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Packet>(
                    "Packet",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Packet {
        static mut instance: ::protobuf::lazy::Lazy<Packet> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Packet,
        };
        unsafe {
            instance.get(Packet::new)
        }
    }
}

impl ::protobuf::Clear for Packet {
    fn clear(&mut self) {
        self.magic_number_present = ::std::option::Option::None;
        self.version_present = ::std::option::Option::None;
        self.field_type = PacketType::PACKAGETYPECOMPATIBLEPROTO2;
        self.compression_present = ::std::option::Option::None;
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Packet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Packet {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HeartBeat {
    // message fields
    pub send_timestamp: i64,
    pub start_timestamp: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HeartBeat {
    fn default() -> &'a HeartBeat {
        <HeartBeat as ::protobuf::Message>::default_instance()
    }
}

impl HeartBeat {
    pub fn new() -> HeartBeat {
        ::std::default::Default::default()
    }

    // int64 send_timestamp = 1;


    pub fn get_send_timestamp(&self) -> i64 {
        self.send_timestamp
    }
    pub fn clear_send_timestamp(&mut self) {
        self.send_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_send_timestamp(&mut self, v: i64) {
        self.send_timestamp = v;
    }

    // int64 start_timestamp = 2;


    pub fn get_start_timestamp(&self) -> i64 {
        self.start_timestamp
    }
    pub fn clear_start_timestamp(&mut self) {
        self.start_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_timestamp(&mut self, v: i64) {
        self.start_timestamp = v;
    }
}

impl ::protobuf::Message for HeartBeat {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.send_timestamp = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.send_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.send_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.start_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(2, self.start_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.send_timestamp != 0 {
            os.write_int64(1, self.send_timestamp)?;
        }
        if self.start_timestamp != 0 {
            os.write_int64(2, self.start_timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HeartBeat {
        HeartBeat::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "send_timestamp",
                    |m: &HeartBeat| { &m.send_timestamp },
                    |m: &mut HeartBeat| { &mut m.send_timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "start_timestamp",
                    |m: &HeartBeat| { &m.start_timestamp },
                    |m: &mut HeartBeat| { &mut m.start_timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HeartBeat>(
                    "HeartBeat",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HeartBeat {
        static mut instance: ::protobuf::lazy::Lazy<HeartBeat> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HeartBeat,
        };
        unsafe {
            instance.get(HeartBeat::new)
        }
    }
}

impl ::protobuf::Clear for HeartBeat {
    fn clear(&mut self) {
        self.send_timestamp = 0;
        self.start_timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HeartBeat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeartBeat {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Handshake {
    // message fields
    pub seeds: ::std::vec::Vec<u8>,
    pub supported_compressions: Compression,
    // message oneof groups
    pub communication_encoding_present: ::std::option::Option<Handshake_oneof_communication_encoding_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Handshake {
    fn default() -> &'a Handshake {
        <Handshake as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Handshake_oneof_communication_encoding_present {
    communication_encoding(::std::string::String),
}

impl Handshake {
    pub fn new() -> Handshake {
        ::std::default::Default::default()
    }

    // string communication_encoding = 1;


    pub fn get_communication_encoding(&self) -> &str {
        match self.communication_encoding_present {
            ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_communication_encoding(&mut self) {
        self.communication_encoding_present = ::std::option::Option::None;
    }

    pub fn has_communication_encoding(&self) -> bool {
        match self.communication_encoding_present {
            ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_communication_encoding(&mut self, v: ::std::string::String) {
        self.communication_encoding_present = ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(v))
    }

    // Mutable pointer to the field.
    pub fn mut_communication_encoding(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(_)) = self.communication_encoding_present {
        } else {
            self.communication_encoding_present = ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(::std::string::String::new()));
        }
        match self.communication_encoding_present {
            ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_communication_encoding(&mut self) -> ::std::string::String {
        if self.has_communication_encoding() {
            match self.communication_encoding_present.take() {
                ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes seeds = 2;


    pub fn get_seeds(&self) -> &[u8] {
        &self.seeds
    }
    pub fn clear_seeds(&mut self) {
        self.seeds.clear();
    }

    // Param is passed by value, moved
    pub fn set_seeds(&mut self, v: ::std::vec::Vec<u8>) {
        self.seeds = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seeds(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.seeds
    }

    // Take field
    pub fn take_seeds(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.seeds, ::std::vec::Vec::new())
    }

    // .com.alibaba.otter.canal.protocol.Compression supported_compressions = 3;


    pub fn get_supported_compressions(&self) -> Compression {
        self.supported_compressions
    }
    pub fn clear_supported_compressions(&mut self) {
        self.supported_compressions = Compression::COMPRESSIONCOMPATIBLEPROTO2;
    }

    // Param is passed by value, moved
    pub fn set_supported_compressions(&mut self, v: Compression) {
        self.supported_compressions = v;
    }
}

impl ::protobuf::Message for Handshake {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.communication_encoding_present = ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(is.read_string()?));
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.seeds)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.supported_compressions, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seeds.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.seeds);
        }
        if self.supported_compressions != Compression::COMPRESSIONCOMPATIBLEPROTO2 {
            my_size += ::protobuf::rt::enum_size(3, self.supported_compressions);
        }
        if let ::std::option::Option::Some(ref v) = self.communication_encoding_present {
            match v {
                &Handshake_oneof_communication_encoding_present::communication_encoding(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seeds.is_empty() {
            os.write_bytes(2, &self.seeds)?;
        }
        if self.supported_compressions != Compression::COMPRESSIONCOMPATIBLEPROTO2 {
            os.write_enum(3, self.supported_compressions.value())?;
        }
        if let ::std::option::Option::Some(ref v) = self.communication_encoding_present {
            match v {
                &Handshake_oneof_communication_encoding_present::communication_encoding(ref v) => {
                    os.write_string(1, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Handshake {
        Handshake::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "communication_encoding",
                    Handshake::has_communication_encoding,
                    Handshake::get_communication_encoding,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "seeds",
                    |m: &Handshake| { &m.seeds },
                    |m: &mut Handshake| { &mut m.seeds },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Compression>>(
                    "supported_compressions",
                    |m: &Handshake| { &m.supported_compressions },
                    |m: &mut Handshake| { &mut m.supported_compressions },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Handshake>(
                    "Handshake",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Handshake {
        static mut instance: ::protobuf::lazy::Lazy<Handshake> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Handshake,
        };
        unsafe {
            instance.get(Handshake::new)
        }
    }
}

impl ::protobuf::Clear for Handshake {
    fn clear(&mut self) {
        self.communication_encoding_present = ::std::option::Option::None;
        self.seeds.clear();
        self.supported_compressions = Compression::COMPRESSIONCOMPATIBLEPROTO2;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Handshake {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Handshake {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientAuth {
    // message fields
    pub username: ::std::string::String,
    pub password: ::std::vec::Vec<u8>,
    pub destination: ::std::string::String,
    pub client_id: ::std::string::String,
    pub filter: ::std::string::String,
    pub start_timestamp: i64,
    // message oneof groups
    pub net_read_timeout_present: ::std::option::Option<ClientAuth_oneof_net_read_timeout_present>,
    pub net_write_timeout_present: ::std::option::Option<ClientAuth_oneof_net_write_timeout_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientAuth {
    fn default() -> &'a ClientAuth {
        <ClientAuth as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ClientAuth_oneof_net_read_timeout_present {
    net_read_timeout(i32),
}

#[derive(Clone,PartialEq,Debug)]
pub enum ClientAuth_oneof_net_write_timeout_present {
    net_write_timeout(i32),
}

impl ClientAuth {
    pub fn new() -> ClientAuth {
        ::std::default::Default::default()
    }

    // string username = 1;


    pub fn get_username(&self) -> &str {
        &self.username
    }
    pub fn clear_username(&mut self) {
        self.username.clear();
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        &mut self.username
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.username, ::std::string::String::new())
    }

    // bytes password = 2;


    pub fn get_password(&self) -> &[u8] {
        &self.password
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::vec::Vec<u8>) {
        self.password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.password
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.password, ::std::vec::Vec::new())
    }

    // int32 net_read_timeout = 3;


    pub fn get_net_read_timeout(&self) -> i32 {
        match self.net_read_timeout_present {
            ::std::option::Option::Some(ClientAuth_oneof_net_read_timeout_present::net_read_timeout(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_net_read_timeout(&mut self) {
        self.net_read_timeout_present = ::std::option::Option::None;
    }

    pub fn has_net_read_timeout(&self) -> bool {
        match self.net_read_timeout_present {
            ::std::option::Option::Some(ClientAuth_oneof_net_read_timeout_present::net_read_timeout(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_net_read_timeout(&mut self, v: i32) {
        self.net_read_timeout_present = ::std::option::Option::Some(ClientAuth_oneof_net_read_timeout_present::net_read_timeout(v))
    }

    // int32 net_write_timeout = 4;


    pub fn get_net_write_timeout(&self) -> i32 {
        match self.net_write_timeout_present {
            ::std::option::Option::Some(ClientAuth_oneof_net_write_timeout_present::net_write_timeout(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_net_write_timeout(&mut self) {
        self.net_write_timeout_present = ::std::option::Option::None;
    }

    pub fn has_net_write_timeout(&self) -> bool {
        match self.net_write_timeout_present {
            ::std::option::Option::Some(ClientAuth_oneof_net_write_timeout_present::net_write_timeout(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_net_write_timeout(&mut self, v: i32) {
        self.net_write_timeout_present = ::std::option::Option::Some(ClientAuth_oneof_net_write_timeout_present::net_write_timeout(v))
    }

    // string destination = 5;


    pub fn get_destination(&self) -> &str {
        &self.destination
    }
    pub fn clear_destination(&mut self) {
        self.destination.clear();
    }

    // Param is passed by value, moved
    pub fn set_destination(&mut self, v: ::std::string::String) {
        self.destination = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination(&mut self) -> &mut ::std::string::String {
        &mut self.destination
    }

    // Take field
    pub fn take_destination(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.destination, ::std::string::String::new())
    }

    // string client_id = 6;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // string filter = 7;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // int64 start_timestamp = 8;


    pub fn get_start_timestamp(&self) -> i64 {
        self.start_timestamp
    }
    pub fn clear_start_timestamp(&mut self) {
        self.start_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_timestamp(&mut self, v: i64) {
        self.start_timestamp = v;
    }
}

impl ::protobuf::Message for ClientAuth {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.username)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.password)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.net_read_timeout_present = ::std::option::Option::Some(ClientAuth_oneof_net_read_timeout_present::net_read_timeout(is.read_int32()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.net_write_timeout_present = ::std::option::Option::Some(ClientAuth_oneof_net_write_timeout_present::net_write_timeout(is.read_int32()?));
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.destination)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.username);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.password);
        }
        if !self.destination.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.destination);
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.client_id);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.filter);
        }
        if self.start_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(8, self.start_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.net_read_timeout_present {
            match v {
                &ClientAuth_oneof_net_read_timeout_present::net_read_timeout(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.net_write_timeout_present {
            match v {
                &ClientAuth_oneof_net_write_timeout_present::net_write_timeout(v) => {
                    my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.username.is_empty() {
            os.write_string(1, &self.username)?;
        }
        if !self.password.is_empty() {
            os.write_bytes(2, &self.password)?;
        }
        if !self.destination.is_empty() {
            os.write_string(5, &self.destination)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(6, &self.client_id)?;
        }
        if !self.filter.is_empty() {
            os.write_string(7, &self.filter)?;
        }
        if self.start_timestamp != 0 {
            os.write_int64(8, self.start_timestamp)?;
        }
        if let ::std::option::Option::Some(ref v) = self.net_read_timeout_present {
            match v {
                &ClientAuth_oneof_net_read_timeout_present::net_read_timeout(v) => {
                    os.write_int32(3, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.net_write_timeout_present {
            match v {
                &ClientAuth_oneof_net_write_timeout_present::net_write_timeout(v) => {
                    os.write_int32(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientAuth {
        ClientAuth::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "username",
                    |m: &ClientAuth| { &m.username },
                    |m: &mut ClientAuth| { &mut m.username },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "password",
                    |m: &ClientAuth| { &m.password },
                    |m: &mut ClientAuth| { &mut m.password },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                    "net_read_timeout",
                    ClientAuth::has_net_read_timeout,
                    ClientAuth::get_net_read_timeout,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                    "net_write_timeout",
                    ClientAuth::has_net_write_timeout,
                    ClientAuth::get_net_write_timeout,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "destination",
                    |m: &ClientAuth| { &m.destination },
                    |m: &mut ClientAuth| { &mut m.destination },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_id",
                    |m: &ClientAuth| { &m.client_id },
                    |m: &mut ClientAuth| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "filter",
                    |m: &ClientAuth| { &m.filter },
                    |m: &mut ClientAuth| { &mut m.filter },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "start_timestamp",
                    |m: &ClientAuth| { &m.start_timestamp },
                    |m: &mut ClientAuth| { &mut m.start_timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientAuth>(
                    "ClientAuth",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientAuth {
        static mut instance: ::protobuf::lazy::Lazy<ClientAuth> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientAuth,
        };
        unsafe {
            instance.get(ClientAuth::new)
        }
    }
}

impl ::protobuf::Clear for ClientAuth {
    fn clear(&mut self) {
        self.username.clear();
        self.password.clear();
        self.net_read_timeout_present = ::std::option::Option::None;
        self.net_write_timeout_present = ::std::option::Option::None;
        self.destination.clear();
        self.client_id.clear();
        self.filter.clear();
        self.start_timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientAuth {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientAuth {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ack {
    // message fields
    pub error_message: ::std::string::String,
    // message oneof groups
    pub error_code_present: ::std::option::Option<Ack_oneof_error_code_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Ack {
    fn default() -> &'a Ack {
        <Ack as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Ack_oneof_error_code_present {
    error_code(i32),
}

impl Ack {
    pub fn new() -> Ack {
        ::std::default::Default::default()
    }

    // int32 error_code = 1;


    pub fn get_error_code(&self) -> i32 {
        match self.error_code_present {
            ::std::option::Option::Some(Ack_oneof_error_code_present::error_code(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_error_code(&mut self) {
        self.error_code_present = ::std::option::Option::None;
    }

    pub fn has_error_code(&self) -> bool {
        match self.error_code_present {
            ::std::option::Option::Some(Ack_oneof_error_code_present::error_code(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error_code(&mut self, v: i32) {
        self.error_code_present = ::std::option::Option::Some(Ack_oneof_error_code_present::error_code(v))
    }

    // string error_message = 2;


    pub fn get_error_message(&self) -> &str {
        &self.error_message
    }
    pub fn clear_error_message(&mut self) {
        self.error_message.clear();
    }

    // Param is passed by value, moved
    pub fn set_error_message(&mut self, v: ::std::string::String) {
        self.error_message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_message(&mut self) -> &mut ::std::string::String {
        &mut self.error_message
    }

    // Take field
    pub fn take_error_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error_message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Ack {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.error_code_present = ::std::option::Option::Some(Ack_oneof_error_code_present::error_code(is.read_int32()?));
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error_message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.error_message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error_message);
        }
        if let ::std::option::Option::Some(ref v) = self.error_code_present {
            match v {
                &Ack_oneof_error_code_present::error_code(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.error_message.is_empty() {
            os.write_string(2, &self.error_message)?;
        }
        if let ::std::option::Option::Some(ref v) = self.error_code_present {
            match v {
                &Ack_oneof_error_code_present::error_code(v) => {
                    os.write_int32(1, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ack {
        Ack::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                    "error_code",
                    Ack::has_error_code,
                    Ack::get_error_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error_message",
                    |m: &Ack| { &m.error_message },
                    |m: &mut Ack| { &mut m.error_message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Ack>(
                    "Ack",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Ack {
        static mut instance: ::protobuf::lazy::Lazy<Ack> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Ack,
        };
        unsafe {
            instance.get(Ack::new)
        }
    }
}

impl ::protobuf::Clear for Ack {
    fn clear(&mut self) {
        self.error_code_present = ::std::option::Option::None;
        self.error_message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ack {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ack {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientAck {
    // message fields
    pub destination: ::std::string::String,
    pub client_id: ::std::string::String,
    pub batch_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientAck {
    fn default() -> &'a ClientAck {
        <ClientAck as ::protobuf::Message>::default_instance()
    }
}

impl ClientAck {
    pub fn new() -> ClientAck {
        ::std::default::Default::default()
    }

    // string destination = 1;


    pub fn get_destination(&self) -> &str {
        &self.destination
    }
    pub fn clear_destination(&mut self) {
        self.destination.clear();
    }

    // Param is passed by value, moved
    pub fn set_destination(&mut self, v: ::std::string::String) {
        self.destination = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination(&mut self) -> &mut ::std::string::String {
        &mut self.destination
    }

    // Take field
    pub fn take_destination(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.destination, ::std::string::String::new())
    }

    // string client_id = 2;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // int64 batch_id = 3;


    pub fn get_batch_id(&self) -> i64 {
        self.batch_id
    }
    pub fn clear_batch_id(&mut self) {
        self.batch_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_batch_id(&mut self, v: i64) {
        self.batch_id = v;
    }
}

impl ::protobuf::Message for ClientAck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.destination)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.batch_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.destination.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.destination);
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_id);
        }
        if self.batch_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.batch_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.destination.is_empty() {
            os.write_string(1, &self.destination)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(2, &self.client_id)?;
        }
        if self.batch_id != 0 {
            os.write_int64(3, self.batch_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientAck {
        ClientAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "destination",
                    |m: &ClientAck| { &m.destination },
                    |m: &mut ClientAck| { &mut m.destination },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_id",
                    |m: &ClientAck| { &m.client_id },
                    |m: &mut ClientAck| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "batch_id",
                    |m: &ClientAck| { &m.batch_id },
                    |m: &mut ClientAck| { &mut m.batch_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientAck>(
                    "ClientAck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientAck {
        static mut instance: ::protobuf::lazy::Lazy<ClientAck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientAck,
        };
        unsafe {
            instance.get(ClientAck::new)
        }
    }
}

impl ::protobuf::Clear for ClientAck {
    fn clear(&mut self) {
        self.destination.clear();
        self.client_id.clear();
        self.batch_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientAck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Sub {
    // message fields
    pub destination: ::std::string::String,
    pub client_id: ::std::string::String,
    pub filter: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Sub {
    fn default() -> &'a Sub {
        <Sub as ::protobuf::Message>::default_instance()
    }
}

impl Sub {
    pub fn new() -> Sub {
        ::std::default::Default::default()
    }

    // string destination = 1;


    pub fn get_destination(&self) -> &str {
        &self.destination
    }
    pub fn clear_destination(&mut self) {
        self.destination.clear();
    }

    // Param is passed by value, moved
    pub fn set_destination(&mut self, v: ::std::string::String) {
        self.destination = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination(&mut self) -> &mut ::std::string::String {
        &mut self.destination
    }

    // Take field
    pub fn take_destination(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.destination, ::std::string::String::new())
    }

    // string client_id = 2;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // string filter = 7;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Sub {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.destination)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.destination.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.destination);
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_id);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.filter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.destination.is_empty() {
            os.write_string(1, &self.destination)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(2, &self.client_id)?;
        }
        if !self.filter.is_empty() {
            os.write_string(7, &self.filter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Sub {
        Sub::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "destination",
                    |m: &Sub| { &m.destination },
                    |m: &mut Sub| { &mut m.destination },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_id",
                    |m: &Sub| { &m.client_id },
                    |m: &mut Sub| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "filter",
                    |m: &Sub| { &m.filter },
                    |m: &mut Sub| { &mut m.filter },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Sub>(
                    "Sub",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Sub {
        static mut instance: ::protobuf::lazy::Lazy<Sub> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Sub,
        };
        unsafe {
            instance.get(Sub::new)
        }
    }
}

impl ::protobuf::Clear for Sub {
    fn clear(&mut self) {
        self.destination.clear();
        self.client_id.clear();
        self.filter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Sub {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sub {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Unsub {
    // message fields
    pub destination: ::std::string::String,
    pub client_id: ::std::string::String,
    pub filter: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Unsub {
    fn default() -> &'a Unsub {
        <Unsub as ::protobuf::Message>::default_instance()
    }
}

impl Unsub {
    pub fn new() -> Unsub {
        ::std::default::Default::default()
    }

    // string destination = 1;


    pub fn get_destination(&self) -> &str {
        &self.destination
    }
    pub fn clear_destination(&mut self) {
        self.destination.clear();
    }

    // Param is passed by value, moved
    pub fn set_destination(&mut self, v: ::std::string::String) {
        self.destination = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination(&mut self) -> &mut ::std::string::String {
        &mut self.destination
    }

    // Take field
    pub fn take_destination(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.destination, ::std::string::String::new())
    }

    // string client_id = 2;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // string filter = 7;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Unsub {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.destination)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.destination.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.destination);
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_id);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.filter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.destination.is_empty() {
            os.write_string(1, &self.destination)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(2, &self.client_id)?;
        }
        if !self.filter.is_empty() {
            os.write_string(7, &self.filter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Unsub {
        Unsub::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "destination",
                    |m: &Unsub| { &m.destination },
                    |m: &mut Unsub| { &mut m.destination },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_id",
                    |m: &Unsub| { &m.client_id },
                    |m: &mut Unsub| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "filter",
                    |m: &Unsub| { &m.filter },
                    |m: &mut Unsub| { &mut m.filter },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Unsub>(
                    "Unsub",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Unsub {
        static mut instance: ::protobuf::lazy::Lazy<Unsub> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Unsub,
        };
        unsafe {
            instance.get(Unsub::new)
        }
    }
}

impl ::protobuf::Clear for Unsub {
    fn clear(&mut self) {
        self.destination.clear();
        self.client_id.clear();
        self.filter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Unsub {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Unsub {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Get {
    // message fields
    pub destination: ::std::string::String,
    pub client_id: ::std::string::String,
    pub fetch_size: i32,
    // message oneof groups
    pub timeout_present: ::std::option::Option<Get_oneof_timeout_present>,
    pub unit_present: ::std::option::Option<Get_oneof_unit_present>,
    pub auto_ack_present: ::std::option::Option<Get_oneof_auto_ack_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Get {
    fn default() -> &'a Get {
        <Get as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Get_oneof_timeout_present {
    timeout(i64),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Get_oneof_unit_present {
    unit(i32),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Get_oneof_auto_ack_present {
    auto_ack(bool),
}

impl Get {
    pub fn new() -> Get {
        ::std::default::Default::default()
    }

    // string destination = 1;


    pub fn get_destination(&self) -> &str {
        &self.destination
    }
    pub fn clear_destination(&mut self) {
        self.destination.clear();
    }

    // Param is passed by value, moved
    pub fn set_destination(&mut self, v: ::std::string::String) {
        self.destination = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination(&mut self) -> &mut ::std::string::String {
        &mut self.destination
    }

    // Take field
    pub fn take_destination(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.destination, ::std::string::String::new())
    }

    // string client_id = 2;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // int32 fetch_size = 3;


    pub fn get_fetch_size(&self) -> i32 {
        self.fetch_size
    }
    pub fn clear_fetch_size(&mut self) {
        self.fetch_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_fetch_size(&mut self, v: i32) {
        self.fetch_size = v;
    }

    // int64 timeout = 4;


    pub fn get_timeout(&self) -> i64 {
        match self.timeout_present {
            ::std::option::Option::Some(Get_oneof_timeout_present::timeout(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_timeout(&mut self) {
        self.timeout_present = ::std::option::Option::None;
    }

    pub fn has_timeout(&self) -> bool {
        match self.timeout_present {
            ::std::option::Option::Some(Get_oneof_timeout_present::timeout(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_timeout(&mut self, v: i64) {
        self.timeout_present = ::std::option::Option::Some(Get_oneof_timeout_present::timeout(v))
    }

    // int32 unit = 5;


    pub fn get_unit(&self) -> i32 {
        match self.unit_present {
            ::std::option::Option::Some(Get_oneof_unit_present::unit(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_unit(&mut self) {
        self.unit_present = ::std::option::Option::None;
    }

    pub fn has_unit(&self) -> bool {
        match self.unit_present {
            ::std::option::Option::Some(Get_oneof_unit_present::unit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unit(&mut self, v: i32) {
        self.unit_present = ::std::option::Option::Some(Get_oneof_unit_present::unit(v))
    }

    // bool auto_ack = 6;


    pub fn get_auto_ack(&self) -> bool {
        match self.auto_ack_present {
            ::std::option::Option::Some(Get_oneof_auto_ack_present::auto_ack(v)) => v,
            _ => false,
        }
    }
    pub fn clear_auto_ack(&mut self) {
        self.auto_ack_present = ::std::option::Option::None;
    }

    pub fn has_auto_ack(&self) -> bool {
        match self.auto_ack_present {
            ::std::option::Option::Some(Get_oneof_auto_ack_present::auto_ack(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_auto_ack(&mut self, v: bool) {
        self.auto_ack_present = ::std::option::Option::Some(Get_oneof_auto_ack_present::auto_ack(v))
    }
}

impl ::protobuf::Message for Get {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.destination)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.fetch_size = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.timeout_present = ::std::option::Option::Some(Get_oneof_timeout_present::timeout(is.read_int64()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.unit_present = ::std::option::Option::Some(Get_oneof_unit_present::unit(is.read_int32()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auto_ack_present = ::std::option::Option::Some(Get_oneof_auto_ack_present::auto_ack(is.read_bool()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.destination.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.destination);
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_id);
        }
        if self.fetch_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.fetch_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.timeout_present {
            match v {
                &Get_oneof_timeout_present::timeout(v) => {
                    my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.unit_present {
            match v {
                &Get_oneof_unit_present::unit(v) => {
                    my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.auto_ack_present {
            match v {
                &Get_oneof_auto_ack_present::auto_ack(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.destination.is_empty() {
            os.write_string(1, &self.destination)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(2, &self.client_id)?;
        }
        if self.fetch_size != 0 {
            os.write_int32(3, self.fetch_size)?;
        }
        if let ::std::option::Option::Some(ref v) = self.timeout_present {
            match v {
                &Get_oneof_timeout_present::timeout(v) => {
                    os.write_int64(4, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.unit_present {
            match v {
                &Get_oneof_unit_present::unit(v) => {
                    os.write_int32(5, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.auto_ack_present {
            match v {
                &Get_oneof_auto_ack_present::auto_ack(v) => {
                    os.write_bool(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Get {
        Get::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "destination",
                    |m: &Get| { &m.destination },
                    |m: &mut Get| { &mut m.destination },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_id",
                    |m: &Get| { &m.client_id },
                    |m: &mut Get| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "fetch_size",
                    |m: &Get| { &m.fetch_size },
                    |m: &mut Get| { &mut m.fetch_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                    "timeout",
                    Get::has_timeout,
                    Get::get_timeout,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                    "unit",
                    Get::has_unit,
                    Get::get_unit,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                    "auto_ack",
                    Get::has_auto_ack,
                    Get::get_auto_ack,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Get>(
                    "Get",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Get {
        static mut instance: ::protobuf::lazy::Lazy<Get> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Get,
        };
        unsafe {
            instance.get(Get::new)
        }
    }
}

impl ::protobuf::Clear for Get {
    fn clear(&mut self) {
        self.destination.clear();
        self.client_id.clear();
        self.fetch_size = 0;
        self.timeout_present = ::std::option::Option::None;
        self.unit_present = ::std::option::Option::None;
        self.auto_ack_present = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Get {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Get {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Messages {
    // message fields
    pub batch_id: i64,
    pub messages: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Messages {
    fn default() -> &'a Messages {
        <Messages as ::protobuf::Message>::default_instance()
    }
}

impl Messages {
    pub fn new() -> Messages {
        ::std::default::Default::default()
    }

    // int64 batch_id = 1;


    pub fn get_batch_id(&self) -> i64 {
        self.batch_id
    }
    pub fn clear_batch_id(&mut self) {
        self.batch_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_batch_id(&mut self, v: i64) {
        self.batch_id = v;
    }

    // repeated bytes messages = 2;


    pub fn get_messages(&self) -> &[::std::vec::Vec<u8>] {
        &self.messages
    }
    pub fn clear_messages(&mut self) {
        self.messages.clear();
    }

    // Param is passed by value, moved
    pub fn set_messages(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.messages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_messages(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.messages
    }

    // Take field
    pub fn take_messages(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.messages, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Messages {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.batch_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.messages)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.batch_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.batch_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.messages {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.batch_id != 0 {
            os.write_int64(1, self.batch_id)?;
        }
        for v in &self.messages {
            os.write_bytes(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Messages {
        Messages::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "batch_id",
                    |m: &Messages| { &m.batch_id },
                    |m: &mut Messages| { &mut m.batch_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "messages",
                    |m: &Messages| { &m.messages },
                    |m: &mut Messages| { &mut m.messages },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Messages>(
                    "Messages",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Messages {
        static mut instance: ::protobuf::lazy::Lazy<Messages> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Messages,
        };
        unsafe {
            instance.get(Messages::new)
        }
    }
}

impl ::protobuf::Clear for Messages {
    fn clear(&mut self) {
        self.batch_id = 0;
        self.messages.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Messages {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Messages {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Dump {
    // message fields
    pub journal: ::std::string::String,
    pub position: i64,
    // message oneof groups
    pub timestamp_present: ::std::option::Option<Dump_oneof_timestamp_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Dump {
    fn default() -> &'a Dump {
        <Dump as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Dump_oneof_timestamp_present {
    timestamp(i64),
}

impl Dump {
    pub fn new() -> Dump {
        ::std::default::Default::default()
    }

    // string journal = 1;


    pub fn get_journal(&self) -> &str {
        &self.journal
    }
    pub fn clear_journal(&mut self) {
        self.journal.clear();
    }

    // Param is passed by value, moved
    pub fn set_journal(&mut self, v: ::std::string::String) {
        self.journal = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_journal(&mut self) -> &mut ::std::string::String {
        &mut self.journal
    }

    // Take field
    pub fn take_journal(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.journal, ::std::string::String::new())
    }

    // int64 position = 2;


    pub fn get_position(&self) -> i64 {
        self.position
    }
    pub fn clear_position(&mut self) {
        self.position = 0;
    }

    // Param is passed by value, moved
    pub fn set_position(&mut self, v: i64) {
        self.position = v;
    }

    // int64 timestamp = 3;


    pub fn get_timestamp(&self) -> i64 {
        match self.timestamp_present {
            ::std::option::Option::Some(Dump_oneof_timestamp_present::timestamp(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp_present = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        match self.timestamp_present {
            ::std::option::Option::Some(Dump_oneof_timestamp_present::timestamp(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp_present = ::std::option::Option::Some(Dump_oneof_timestamp_present::timestamp(v))
    }
}

impl ::protobuf::Message for Dump {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.journal)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.position = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.timestamp_present = ::std::option::Option::Some(Dump_oneof_timestamp_present::timestamp(is.read_int64()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.journal.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.journal);
        }
        if self.position != 0 {
            my_size += ::protobuf::rt::value_size(2, self.position, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.timestamp_present {
            match v {
                &Dump_oneof_timestamp_present::timestamp(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.journal.is_empty() {
            os.write_string(1, &self.journal)?;
        }
        if self.position != 0 {
            os.write_int64(2, self.position)?;
        }
        if let ::std::option::Option::Some(ref v) = self.timestamp_present {
            match v {
                &Dump_oneof_timestamp_present::timestamp(v) => {
                    os.write_int64(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Dump {
        Dump::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "journal",
                    |m: &Dump| { &m.journal },
                    |m: &mut Dump| { &mut m.journal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "position",
                    |m: &Dump| { &m.position },
                    |m: &mut Dump| { &mut m.position },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                    "timestamp",
                    Dump::has_timestamp,
                    Dump::get_timestamp,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Dump>(
                    "Dump",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Dump {
        static mut instance: ::protobuf::lazy::Lazy<Dump> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Dump,
        };
        unsafe {
            instance.get(Dump::new)
        }
    }
}

impl ::protobuf::Clear for Dump {
    fn clear(&mut self) {
        self.journal.clear();
        self.position = 0;
        self.timestamp_present = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Dump {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Dump {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientRollback {
    // message fields
    pub destination: ::std::string::String,
    pub client_id: ::std::string::String,
    pub batch_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientRollback {
    fn default() -> &'a ClientRollback {
        <ClientRollback as ::protobuf::Message>::default_instance()
    }
}

impl ClientRollback {
    pub fn new() -> ClientRollback {
        ::std::default::Default::default()
    }

    // string destination = 1;


    pub fn get_destination(&self) -> &str {
        &self.destination
    }
    pub fn clear_destination(&mut self) {
        self.destination.clear();
    }

    // Param is passed by value, moved
    pub fn set_destination(&mut self, v: ::std::string::String) {
        self.destination = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination(&mut self) -> &mut ::std::string::String {
        &mut self.destination
    }

    // Take field
    pub fn take_destination(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.destination, ::std::string::String::new())
    }

    // string client_id = 2;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // int64 batch_id = 3;


    pub fn get_batch_id(&self) -> i64 {
        self.batch_id
    }
    pub fn clear_batch_id(&mut self) {
        self.batch_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_batch_id(&mut self, v: i64) {
        self.batch_id = v;
    }
}

impl ::protobuf::Message for ClientRollback {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.destination)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.batch_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.destination.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.destination);
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_id);
        }
        if self.batch_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.batch_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.destination.is_empty() {
            os.write_string(1, &self.destination)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(2, &self.client_id)?;
        }
        if self.batch_id != 0 {
            os.write_int64(3, self.batch_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientRollback {
        ClientRollback::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "destination",
                    |m: &ClientRollback| { &m.destination },
                    |m: &mut ClientRollback| { &mut m.destination },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_id",
                    |m: &ClientRollback| { &m.client_id },
                    |m: &mut ClientRollback| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "batch_id",
                    |m: &ClientRollback| { &m.batch_id },
                    |m: &mut ClientRollback| { &mut m.batch_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientRollback>(
                    "ClientRollback",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientRollback {
        static mut instance: ::protobuf::lazy::Lazy<ClientRollback> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientRollback,
        };
        unsafe {
            instance.get(ClientRollback::new)
        }
    }
}

impl ::protobuf::Clear for ClientRollback {
    fn clear(&mut self) {
        self.destination.clear();
        self.client_id.clear();
        self.batch_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientRollback {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientRollback {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Compression {
    COMPRESSIONCOMPATIBLEPROTO2 = 0,
    NONE = 1,
    ZLIB = 2,
    GZIP = 3,
    LZF = 4,
}

impl ::protobuf::ProtobufEnum for Compression {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Compression> {
        match value {
            0 => ::std::option::Option::Some(Compression::COMPRESSIONCOMPATIBLEPROTO2),
            1 => ::std::option::Option::Some(Compression::NONE),
            2 => ::std::option::Option::Some(Compression::ZLIB),
            3 => ::std::option::Option::Some(Compression::GZIP),
            4 => ::std::option::Option::Some(Compression::LZF),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Compression] = &[
            Compression::COMPRESSIONCOMPATIBLEPROTO2,
            Compression::NONE,
            Compression::ZLIB,
            Compression::GZIP,
            Compression::LZF,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Compression", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Compression {
}

impl ::std::default::Default for Compression {
    fn default() -> Self {
        Compression::COMPRESSIONCOMPATIBLEPROTO2
    }
}

impl ::protobuf::reflect::ProtobufValue for Compression {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PacketType {
    PACKAGETYPECOMPATIBLEPROTO2 = 0,
    HANDSHAKE = 1,
    CLIENTAUTHENTICATION = 2,
    ACK = 3,
    SUBSCRIPTION = 4,
    UNSUBSCRIPTION = 5,
    GET = 6,
    MESSAGES = 7,
    CLIENTACK = 8,
    SHUTDOWN = 9,
    DUMP = 10,
    HEARTBEAT = 11,
    CLIENTROLLBACK = 12,
}

impl ::protobuf::ProtobufEnum for PacketType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PacketType> {
        match value {
            0 => ::std::option::Option::Some(PacketType::PACKAGETYPECOMPATIBLEPROTO2),
            1 => ::std::option::Option::Some(PacketType::HANDSHAKE),
            2 => ::std::option::Option::Some(PacketType::CLIENTAUTHENTICATION),
            3 => ::std::option::Option::Some(PacketType::ACK),
            4 => ::std::option::Option::Some(PacketType::SUBSCRIPTION),
            5 => ::std::option::Option::Some(PacketType::UNSUBSCRIPTION),
            6 => ::std::option::Option::Some(PacketType::GET),
            7 => ::std::option::Option::Some(PacketType::MESSAGES),
            8 => ::std::option::Option::Some(PacketType::CLIENTACK),
            9 => ::std::option::Option::Some(PacketType::SHUTDOWN),
            10 => ::std::option::Option::Some(PacketType::DUMP),
            11 => ::std::option::Option::Some(PacketType::HEARTBEAT),
            12 => ::std::option::Option::Some(PacketType::CLIENTROLLBACK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PacketType] = &[
            PacketType::PACKAGETYPECOMPATIBLEPROTO2,
            PacketType::HANDSHAKE,
            PacketType::CLIENTAUTHENTICATION,
            PacketType::ACK,
            PacketType::SUBSCRIPTION,
            PacketType::UNSUBSCRIPTION,
            PacketType::GET,
            PacketType::MESSAGES,
            PacketType::CLIENTACK,
            PacketType::SHUTDOWN,
            PacketType::DUMP,
            PacketType::HEARTBEAT,
            PacketType::CLIENTROLLBACK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("PacketType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for PacketType {
}

impl ::std::default::Default for PacketType {
    fn default() -> Self {
        PacketType::PACKAGETYPECOMPATIBLEPROTO2
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13CanalProtocol.proto\x12\x20com.alibaba.otter.canal.protocol\"\xb4\
    \x02\n\x06Packet\x12#\n\x0cmagic_number\x18\x01\x20\x01(\x05H\0R\x0bmagi\
    cNumber\x12\x1a\n\x07version\x18\x02\x20\x01(\x05H\x01R\x07version\x12@\
    \n\x04type\x18\x03\x20\x01(\x0e2,.com.alibaba.otter.canal.protocol.Packe\
    tTypeR\x04type\x12Q\n\x0bcompression\x18\x04\x20\x01(\x0e2-.com.alibaba.\
    otter.canal.protocol.CompressionH\x02R\x0bcompression\x12\x12\n\x04body\
    \x18\x05\x20\x01(\x0cR\x04bodyB\x16\n\x14magic_number_presentB\x11\n\x0f\
    version_presentB\x15\n\x13compression_present\"[\n\tHeartBeat\x12%\n\x0e\
    send_timestamp\x18\x01\x20\x01(\x03R\rsendTimestamp\x12'\n\x0fstart_time\
    stamp\x18\x02\x20\x01(\x03R\x0estartTimestamp\"\xe2\x01\n\tHandshake\x12\
    7\n\x16communication_encoding\x18\x01\x20\x01(\tH\0R\x15communicationEnc\
    oding\x12\x14\n\x05seeds\x18\x02\x20\x01(\x0cR\x05seeds\x12d\n\x16suppor\
    ted_compressions\x18\x03\x20\x01(\x0e2-.com.alibaba.otter.canal.protocol\
    .CompressionR\x15supportedCompressionsB\x20\n\x1ecommunication_encoding_\
    present\"\xd7\x02\n\nClientAuth\x12\x1a\n\x08username\x18\x01\x20\x01(\t\
    R\x08username\x12\x1a\n\x08password\x18\x02\x20\x01(\x0cR\x08password\
    \x12*\n\x10net_read_timeout\x18\x03\x20\x01(\x05H\0R\x0enetReadTimeout\
    \x12,\n\x11net_write_timeout\x18\x04\x20\x01(\x05H\x01R\x0fnetWriteTimeo\
    ut\x12\x20\n\x0bdestination\x18\x05\x20\x01(\tR\x0bdestination\x12\x1b\n\
    \tclient_id\x18\x06\x20\x01(\tR\x08clientId\x12\x16\n\x06filter\x18\x07\
    \x20\x01(\tR\x06filter\x12'\n\x0fstart_timestamp\x18\x08\x20\x01(\x03R\
    \x0estartTimestampB\x1a\n\x18net_read_timeout_presentB\x1b\n\x19net_writ\
    e_timeout_present\"a\n\x03Ack\x12\x1f\n\nerror_code\x18\x01\x20\x01(\x05\
    H\0R\terrorCode\x12#\n\rerror_message\x18\x02\x20\x01(\tR\x0cerrorMessag\
    eB\x14\n\x12error_code_present\"e\n\tClientAck\x12\x20\n\x0bdestination\
    \x18\x01\x20\x01(\tR\x0bdestination\x12\x1b\n\tclient_id\x18\x02\x20\x01\
    (\tR\x08clientId\x12\x19\n\x08batch_id\x18\x03\x20\x01(\x03R\x07batchId\
    \"\\\n\x03Sub\x12\x20\n\x0bdestination\x18\x01\x20\x01(\tR\x0bdestinatio\
    n\x12\x1b\n\tclient_id\x18\x02\x20\x01(\tR\x08clientId\x12\x16\n\x06filt\
    er\x18\x07\x20\x01(\tR\x06filter\"^\n\x05Unsub\x12\x20\n\x0bdestination\
    \x18\x01\x20\x01(\tR\x0bdestination\x12\x1b\n\tclient_id\x18\x02\x20\x01\
    (\tR\x08clientId\x12\x16\n\x06filter\x18\x07\x20\x01(\tR\x06filter\"\xe9\
    \x01\n\x03Get\x12\x20\n\x0bdestination\x18\x01\x20\x01(\tR\x0bdestinatio\
    n\x12\x1b\n\tclient_id\x18\x02\x20\x01(\tR\x08clientId\x12\x1d\n\nfetch_\
    size\x18\x03\x20\x01(\x05R\tfetchSize\x12\x1a\n\x07timeout\x18\x04\x20\
    \x01(\x03H\0R\x07timeout\x12\x14\n\x04unit\x18\x05\x20\x01(\x05H\x01R\
    \x04unit\x12\x1b\n\x08auto_ack\x18\x06\x20\x01(\x08H\x02R\x07autoAckB\
    \x11\n\x0ftimeout_presentB\x0e\n\x0cunit_presentB\x12\n\x10auto_ack_pres\
    ent\"A\n\x08Messages\x12\x19\n\x08batch_id\x18\x01\x20\x01(\x03R\x07batc\
    hId\x12\x1a\n\x08messages\x18\x02\x20\x03(\x0cR\x08messages\"q\n\x04Dump\
    \x12\x18\n\x07journal\x18\x01\x20\x01(\tR\x07journal\x12\x1a\n\x08positi\
    on\x18\x02\x20\x01(\x03R\x08position\x12\x1e\n\ttimestamp\x18\x03\x20\
    \x01(\x03H\0R\ttimestampB\x13\n\x11timestamp_present\"j\n\x0eClientRollb\
    ack\x12\x20\n\x0bdestination\x18\x01\x20\x01(\tR\x0bdestination\x12\x1b\
    \n\tclient_id\x18\x02\x20\x01(\tR\x08clientId\x12\x19\n\x08batch_id\x18\
    \x03\x20\x01(\x03R\x07batchId*U\n\x0bCompression\x12\x1f\n\x1bCOMPRESSIO\
    NCOMPATIBLEPROTO2\x10\0\x12\x08\n\x04NONE\x10\x01\x12\x08\n\x04ZLIB\x10\
    \x02\x12\x08\n\x04GZIP\x10\x03\x12\x07\n\x03LZF\x10\x04*\xe6\x01\n\nPack\
    etType\x12\x1f\n\x1bPACKAGETYPECOMPATIBLEPROTO2\x10\0\x12\r\n\tHANDSHAKE\
    \x10\x01\x12\x18\n\x14CLIENTAUTHENTICATION\x10\x02\x12\x07\n\x03ACK\x10\
    \x03\x12\x10\n\x0cSUBSCRIPTION\x10\x04\x12\x12\n\x0eUNSUBSCRIPTION\x10\
    \x05\x12\x07\n\x03GET\x10\x06\x12\x0c\n\x08MESSAGES\x10\x07\x12\r\n\tCLI\
    ENTACK\x10\x08\x12\x0c\n\x08SHUTDOWN\x10\t\x12\x08\n\x04DUMP\x10\n\x12\r\
    \n\tHEARTBEAT\x10\x0b\x12\x12\n\x0eCLIENTROLLBACK\x10\x0cB1\n\x20com.ali\
    baba.otter.canal.protocolB\x0bCanalPacketH\x01J\xa5'\n\x07\x12\x05\0\0\
    \x99\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\
    \x08(\n\x08\n\x01\x08\x12\x03\x03\09\n\t\n\x02\x08\x01\x12\x03\x03\09\n\
    \x08\n\x01\x08\x12\x03\x04\0,\n\t\n\x02\x08\x08\x12\x03\x04\0,\n\x08\n\
    \x01\x08\x12\x03\x05\0\x1c\n\t\n\x02\x08\t\x12\x03\x05\0\x1c\n\n\n\x02\
    \x05\0\x12\x04\x07\0\r\x01\n\n\n\x03\x05\0\x01\x12\x03\x07\x05\x10\n\x0b\
    \n\x04\x05\0\x02\0\x12\x03\x08\x04$\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\
    \x08\x04\x1f\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x08\"#\n\x0b\n\x04\x05\
    \0\x02\x01\x12\x03\t\x04\r\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\t\x04\
    \x08\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\t\x0b\x0c\n\x0b\n\x04\x05\0\
    \x02\x02\x12\x03\n\x04\r\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\n\x04\x08\
    \n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\n\x0b\x0c\n\x0b\n\x04\x05\0\x02\
    \x03\x12\x03\x0b\x04\r\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x0b\x04\x08\
    \n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x0b\x0b\x0c\n\x0b\n\x04\x05\0\x02\
    \x04\x12\x03\x0c\x04\x0c\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x0c\x04\
    \x07\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x0c\n\x0b\n\n\n\x02\x05\x01\
    \x12\x04\x0f\0\x20\x01\n\n\n\x03\x05\x01\x01\x12\x03\x0f\x05\x0f\n\x18\n\
    \x04\x05\x01\x02\0\x12\x03\x11\x04$\x1a\x0bcompatible\n\n\x0c\n\x05\x05\
    \x01\x02\0\x01\x12\x03\x11\x04\x1f\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\
    \x11\"#\n\x0b\n\x04\x05\x01\x02\x01\x12\x03\x12\x04\x12\n\x0c\n\x05\x05\
    \x01\x02\x01\x01\x12\x03\x12\x04\r\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\
    \x03\x12\x10\x11\n\x0b\n\x04\x05\x01\x02\x02\x12\x03\x13\x04\x1d\n\x0c\n\
    \x05\x05\x01\x02\x02\x01\x12\x03\x13\x04\x18\n\x0c\n\x05\x05\x01\x02\x02\
    \x02\x12\x03\x13\x1b\x1c\n\x0b\n\x04\x05\x01\x02\x03\x12\x03\x14\x04\x0c\
    \n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03\x14\x04\x07\n\x0c\n\x05\x05\x01\
    \x02\x03\x02\x12\x03\x14\n\x0b\n\x0b\n\x04\x05\x01\x02\x04\x12\x03\x15\
    \x04\x15\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\x03\x15\x04\x10\n\x0c\n\x05\
    \x05\x01\x02\x04\x02\x12\x03\x15\x13\x14\n\x0b\n\x04\x05\x01\x02\x05\x12\
    \x03\x16\x04\x17\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\x03\x16\x04\x12\n\
    \x0c\n\x05\x05\x01\x02\x05\x02\x12\x03\x16\x15\x16\n\x0b\n\x04\x05\x01\
    \x02\x06\x12\x03\x17\x04\x0c\n\x0c\n\x05\x05\x01\x02\x06\x01\x12\x03\x17\
    \x04\x07\n\x0c\n\x05\x05\x01\x02\x06\x02\x12\x03\x17\n\x0b\n\x0b\n\x04\
    \x05\x01\x02\x07\x12\x03\x18\x04\x11\n\x0c\n\x05\x05\x01\x02\x07\x01\x12\
    \x03\x18\x04\x0c\n\x0c\n\x05\x05\x01\x02\x07\x02\x12\x03\x18\x0f\x10\n\
    \x0b\n\x04\x05\x01\x02\x08\x12\x03\x19\x04\x12\n\x0c\n\x05\x05\x01\x02\
    \x08\x01\x12\x03\x19\x04\r\n\x0c\n\x05\x05\x01\x02\x08\x02\x12\x03\x19\
    \x10\x11\n\x1e\n\x04\x05\x01\x02\t\x12\x03\x1b\x04\x11\x1a\x11\x20manage\
    ment\x20part\n\n\x0c\n\x05\x05\x01\x02\t\x01\x12\x03\x1b\x04\x0c\n\x0c\n\
    \x05\x05\x01\x02\t\x02\x12\x03\x1b\x0f\x10\n\x1a\n\x04\x05\x01\x02\n\x12\
    \x03\x1d\x04\x0e\x1a\r\x20integration\n\n\x0c\n\x05\x05\x01\x02\n\x01\
    \x12\x03\x1d\x04\x08\n\x0c\n\x05\x05\x01\x02\n\x02\x12\x03\x1d\x0b\r\n\
    \x0b\n\x04\x05\x01\x02\x0b\x12\x03\x1e\x04\x13\n\x0c\n\x05\x05\x01\x02\
    \x0b\x01\x12\x03\x1e\x04\r\n\x0c\n\x05\x05\x01\x02\x0b\x02\x12\x03\x1e\
    \x10\x12\n\x0b\n\x04\x05\x01\x02\x0c\x12\x03\x1f\x04\x18\n\x0c\n\x05\x05\
    \x01\x02\x0c\x01\x12\x03\x1f\x04\x12\n\x0c\n\x05\x05\x01\x02\x0c\x02\x12\
    \x03\x1f\x15\x17\n\n\n\x02\x04\0\x12\x04\"\02\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\"\x08\x0e\n\x1e\n\x04\x04\0\x08\0\x12\x04$\x04&\x05\x1a\x10[def\
    ault\x20=\x2017];\n\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03$\n\x1e\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03%\x08\x1f\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03%\
    \x08\r\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03%\x0e\x1a\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03%\x1d\x1e\n\x1d\n\x04\x04\0\x08\x01\x12\x04(\x04*\x05\
    \x1a\x0f[default\x20=\x201];\n\n\x0c\n\x05\x04\0\x08\x01\x01\x12\x03(\n\
    \x19\n\x0b\n\x04\x04\0\x02\x01\x12\x03)\x08\x1a\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03)\x08\r\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03)\x0e\x15\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03)\x18\x19\n\x0b\n\x04\x04\0\x02\x02\
    \x12\x03+\x04\x18\n\r\n\x05\x04\0\x02\x02\x04\x12\x04+\x04*\x06\n\x0c\n\
    \x05\x04\0\x02\x02\x06\x12\x03+\x04\x0e\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03+\x0f\x13\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03+\x16\x17\n\x20\n\
    \x04\x04\0\x08\x02\x12\x04-\x04/\x05\x1a\x12[default\x20=\x20NONE];\n\n\
    \x0c\n\x05\x04\0\x08\x02\x01\x12\x03-\n\x1d\n\x0b\n\x04\x04\0\x02\x03\
    \x12\x03.\x08$\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03.\x08\x13\n\x0c\n\
    \x05\x04\0\x02\x03\x01\x12\x03.\x14\x1f\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03.\"#\n\x0b\n\x04\x04\0\x02\x04\x12\x031\x04\x13\n\r\n\x05\x04\0\
    \x02\x04\x04\x12\x041\x04/\x05\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x031\
    \x04\t\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x031\n\x0e\n\x0c\n\x05\x04\0\
    \x02\x04\x03\x12\x031\x11\x12\n\n\n\x02\x04\x01\x12\x044\07\x01\n\n\n\
    \x03\x04\x01\x01\x12\x034\x08\x11\n\x0b\n\x04\x04\x01\x02\0\x12\x035\x04\
    \x1d\n\r\n\x05\x04\x01\x02\0\x04\x12\x045\x044\x13\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x035\x04\t\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x035\n\x18\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x035\x1b\x1c\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x036\x04\x1e\n\r\n\x05\x04\x01\x02\x01\x04\x12\x046\x045\x1d\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x036\x04\t\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x036\n\x19\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x036\x1c\x1d\
    \n\n\n\x02\x04\x02\x12\x049\0@\x01\n\n\n\x03\x04\x02\x01\x12\x039\x08\
    \x11\n$\n\x04\x04\x02\x08\0\x12\x04;\x04=\x05\x1a\x16\x20\x20[default\
    \x20=\x20\"utf8\"];\n\n\x0c\n\x05\x04\x02\x08\0\x01\x12\x03;\n(\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x03<\x08*\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03<\
    \x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03<\x0f%\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03<()\n\x0b\n\x04\x04\x02\x02\x01\x12\x03>\x04\x14\n\r\n\
    \x05\x04\x02\x02\x01\x04\x12\x04>\x04=\x05\n\x0c\n\x05\x04\x02\x02\x01\
    \x05\x12\x03>\x04\t\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03>\n\x0f\n\x0c\
    \n\x05\x04\x02\x02\x01\x03\x12\x03>\x12\x13\n\x0b\n\x04\x04\x02\x02\x02\
    \x12\x03?\x04+\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04?\x04>\x14\n\x0c\n\
    \x05\x04\x02\x02\x02\x06\x12\x03?\x04\x0f\n\x0c\n\x05\x04\x02\x02\x02\
    \x01\x12\x03?\x10&\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03?)*\n#\n\x02\
    \x04\x03\x12\x04C\0R\x01\x1a\x17\x20client\x20authentication\n\n\n\n\x03\
    \x04\x03\x01\x12\x03C\x08\x12\n\x0b\n\x04\x04\x03\x02\0\x12\x03D\x04\x18\
    \n\r\n\x05\x04\x03\x02\0\x04\x12\x04D\x04C\x14\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03D\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03D\x0b\x13\n\x0c\
    \n\x05\x04\x03\x02\0\x03\x12\x03D\x16\x17\n@\n\x04\x04\x03\x02\x01\x12\
    \x03E\x04\x17\"3\x20hashed\x20password\x20with\x20seeds\x20from\x20Hands\
    hake\x20message\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04E\x04D\x18\n\x0c\
    \n\x05\x04\x03\x02\x01\x05\x12\x03E\x04\t\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03E\n\x12\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03E\x15\x16\n\
    \x1d\n\x04\x04\x03\x08\0\x12\x04G\x04I\x05\x1a\x0f\x20[default\x20=\x200\
    ]\n\n\x0c\n\x05\x04\x03\x08\0\x01\x12\x03G\n\"\n\x19\n\x04\x04\x03\x02\
    \x02\x12\x03H\x08#\"\x0c\x20in\x20seconds\n\n\x0c\n\x05\x04\x03\x02\x02\
    \x05\x12\x03H\x08\r\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03H\x0e\x1e\n\
    \x0c\n\x05\x04\x03\x02\x02\x03\x12\x03H!\"\n\x1e\n\x04\x04\x03\x08\x01\
    \x12\x04K\x04M\x05\x1a\x10\x20[default\x20=\x200];\n\n\x0c\n\x05\x04\x03\
    \x08\x01\x01\x12\x03K\n#\n\x19\n\x04\x04\x03\x02\x03\x12\x03L\x08$\"\x0c\
    \x20in\x20seconds\n\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03L\x08\r\n\x0c\
    \n\x05\x04\x03\x02\x03\x01\x12\x03L\x0e\x1f\n\x0c\n\x05\x04\x03\x02\x03\
    \x03\x12\x03L\"#\n\x0b\n\x04\x04\x03\x02\x04\x12\x03N\x04\x1b\n\r\n\x05\
    \x04\x03\x02\x04\x04\x12\x04N\x04M\x05\n\x0c\n\x05\x04\x03\x02\x04\x05\
    \x12\x03N\x04\n\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03N\x0b\x16\n\x0c\n\
    \x05\x04\x03\x02\x04\x03\x12\x03N\x19\x1a\n\x0b\n\x04\x04\x03\x02\x05\
    \x12\x03O\x04\x19\n\r\n\x05\x04\x03\x02\x05\x04\x12\x04O\x04N\x1b\n\x0c\
    \n\x05\x04\x03\x02\x05\x05\x12\x03O\x04\n\n\x0c\n\x05\x04\x03\x02\x05\
    \x01\x12\x03O\x0b\x14\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03O\x17\x18\n\
    \x0b\n\x04\x04\x03\x02\x06\x12\x03P\x04\x16\n\r\n\x05\x04\x03\x02\x06\
    \x04\x12\x04P\x04O\x19\n\x0c\n\x05\x04\x03\x02\x06\x05\x12\x03P\x04\n\n\
    \x0c\n\x05\x04\x03\x02\x06\x01\x12\x03P\x0b\x11\n\x0c\n\x05\x04\x03\x02\
    \x06\x03\x12\x03P\x14\x15\n\x0b\n\x04\x04\x03\x02\x07\x12\x03Q\x04\x1e\n\
    \r\n\x05\x04\x03\x02\x07\x04\x12\x04Q\x04P\x16\n\x0c\n\x05\x04\x03\x02\
    \x07\x05\x12\x03Q\x04\t\n\x0c\n\x05\x04\x03\x02\x07\x01\x12\x03Q\n\x19\n\
    \x0c\n\x05\x04\x03\x02\x07\x03\x12\x03Q\x1c\x1d\n\n\n\x02\x04\x04\x12\
    \x04T\0Z\x01\n\n\n\x03\x04\x04\x01\x12\x03T\x08\x0b\n\x1c\n\x04\x04\x04\
    \x08\0\x12\x04V\x04X\x05\x1a\x0e[default\x20=\x200]\n\n\x0c\n\x05\x04\
    \x04\x08\0\x01\x12\x03V\n\x1c\n\x0b\n\x04\x04\x04\x02\0\x12\x03W\x08\x1d\
    \n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03W\x08\r\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x03W\x0e\x18\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03W\x1b\x1c\n`\
    \n\x04\x04\x04\x02\x01\x12\x03Y\x04\x1d\"S\x20if\x20something\x20like\
    \x20compression\x20is\x20not\x20supported,\x20erorr_message\x20will\x20t\
    ell\x20about\x20it.\n\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04Y\x04X\x05\n\
    \x0c\n\x05\x04\x04\x02\x01\x05\x12\x03Y\x04\n\n\x0c\n\x05\x04\x04\x02\
    \x01\x01\x12\x03Y\x0b\x18\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03Y\x1b\
    \x1c\n\n\n\x02\x04\x05\x12\x04\\\0`\x01\n\n\n\x03\x04\x05\x01\x12\x03\\\
    \x08\x11\n\x0b\n\x04\x04\x05\x02\0\x12\x03]\x04\x1b\n\r\n\x05\x04\x05\
    \x02\0\x04\x12\x04]\x04\\\x13\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03]\x04\
    \n\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03]\x0b\x16\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x03]\x19\x1a\n\x0b\n\x04\x04\x05\x02\x01\x12\x03^\x04\x19\
    \n\r\n\x05\x04\x05\x02\x01\x04\x12\x04^\x04]\x1b\n\x0c\n\x05\x04\x05\x02\
    \x01\x05\x12\x03^\x04\n\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03^\x0b\x14\
    \n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03^\x17\x18\n\x0b\n\x04\x04\x05\
    \x02\x02\x12\x03_\x04\x17\n\r\n\x05\x04\x05\x02\x02\x04\x12\x04_\x04^\
    \x19\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x03_\x04\t\n\x0c\n\x05\x04\x05\
    \x02\x02\x01\x12\x03_\n\x12\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03_\x15\
    \x16\n\x1a\n\x02\x04\x06\x12\x04c\0g\x01\x1a\x0e\x20subscription\n\n\n\n\
    \x03\x04\x06\x01\x12\x03c\x08\x0b\n\x0b\n\x04\x04\x06\x02\0\x12\x03d\x04\
    \x1b\n\r\n\x05\x04\x06\x02\0\x04\x12\x04d\x04c\r\n\x0c\n\x05\x04\x06\x02\
    \0\x05\x12\x03d\x04\n\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03d\x0b\x16\n\
    \x0c\n\x05\x04\x06\x02\0\x03\x12\x03d\x19\x1a\n\x0b\n\x04\x04\x06\x02\
    \x01\x12\x03e\x04\x19\n\r\n\x05\x04\x06\x02\x01\x04\x12\x04e\x04d\x1b\n\
    \x0c\n\x05\x04\x06\x02\x01\x05\x12\x03e\x04\n\n\x0c\n\x05\x04\x06\x02\
    \x01\x01\x12\x03e\x0b\x14\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03e\x17\
    \x18\n\x0b\n\x04\x04\x06\x02\x02\x12\x03f\x04\x16\n\r\n\x05\x04\x06\x02\
    \x02\x04\x12\x04f\x04e\x19\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03f\x04\
    \n\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03f\x0b\x11\n\x0c\n\x05\x04\x06\
    \x02\x02\x03\x12\x03f\x14\x15\n\x1c\n\x02\x04\x07\x12\x04j\0n\x01\x1a\
    \x10\x20Unsubscription\n\n\n\n\x03\x04\x07\x01\x12\x03j\x08\r\n\x0b\n\
    \x04\x04\x07\x02\0\x12\x03k\x04\x1b\n\r\n\x05\x04\x07\x02\0\x04\x12\x04k\
    \x04j\x0f\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03k\x04\n\n\x0c\n\x05\x04\
    \x07\x02\0\x01\x12\x03k\x0b\x16\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03k\
    \x19\x1a\n\x0b\n\x04\x04\x07\x02\x01\x12\x03l\x04\x19\n\r\n\x05\x04\x07\
    \x02\x01\x04\x12\x04l\x04k\x1b\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03l\
    \x04\n\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03l\x0b\x14\n\x0c\n\x05\x04\
    \x07\x02\x01\x03\x12\x03l\x17\x18\n\x0b\n\x04\x04\x07\x02\x02\x12\x03m\
    \x04\x16\n\r\n\x05\x04\x07\x02\x02\x04\x12\x04m\x04l\x19\n\x0c\n\x05\x04\
    \x07\x02\x02\x05\x12\x03m\x04\n\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03m\
    \x0b\x11\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03m\x14\x15\n\x1b\n\x02\
    \x04\x08\x12\x05q\0\x82\x01\x01\x1a\x0e\x20\x20PullRequest\n\n\n\n\x03\
    \x04\x08\x01\x12\x03q\x08\x0b\n\x0b\n\x04\x04\x08\x02\0\x12\x03r\x04\x1b\
    \n\r\n\x05\x04\x08\x02\0\x04\x12\x04r\x04q\r\n\x0c\n\x05\x04\x08\x02\0\
    \x05\x12\x03r\x04\n\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03r\x0b\x16\n\x0c\
    \n\x05\x04\x08\x02\0\x03\x12\x03r\x19\x1a\n\x0b\n\x04\x04\x08\x02\x01\
    \x12\x03s\x04\x19\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04s\x04r\x1b\n\x0c\
    \n\x05\x04\x08\x02\x01\x05\x12\x03s\x04\n\n\x0c\n\x05\x04\x08\x02\x01\
    \x01\x12\x03s\x0b\x14\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03s\x17\x18\n\
    \x0b\n\x04\x04\x08\x02\x02\x12\x03t\x04\x19\n\r\n\x05\x04\x08\x02\x02\
    \x04\x12\x04t\x04s\x19\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\x03t\x04\t\n\
    \x0c\n\x05\x04\x08\x02\x02\x01\x12\x03t\n\x14\n\x0c\n\x05\x04\x08\x02\
    \x02\x03\x12\x03t\x17\x18\n\x1d\n\x04\x04\x08\x08\0\x12\x04v\x04x\x05\
    \x1a\x0f[default\x20=\x20-1]\n\n\x0c\n\x05\x04\x08\x08\0\x01\x12\x03v\n\
    \x19\n)\n\x04\x04\x08\x02\x03\x12\x03w\x08\x1a\"\x1c\x20\xe9\xbb\x98\xe8\
    \xae\xa4-1\xe6\x97\xb6\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xb8\x8d\xe6\x8e\xa7\
    \xe5\x88\xb6\n\n\x0c\n\x05\x04\x08\x02\x03\x05\x12\x03w\x08\r\n\x0c\n\
    \x05\x04\x08\x02\x03\x01\x12\x03w\x0e\x15\n\x0c\n\x05\x04\x08\x02\x03\
    \x03\x12\x03w\x18\x19\n\x1c\n\x04\x04\x08\x08\x01\x12\x04z\x04|\x05\x1a\
    \x0e[default\x20=\x202]\n\n\x0c\n\x05\x04\x08\x08\x01\x01\x12\x03z\n\x16\
    \nV\n\x04\x04\x08\x02\x04\x12\x03{\x08\x17\"I\x20\xe6\x95\xb0\xe5\xad\
    \x97\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c0:\xe7\xba\xb3\xe7\xa7\x92,1:\
    \xe6\xaf\xab\xe7\xa7\x92,2:\xe5\xbe\xae\xe7\xa7\x92,3:\xe7\xa7\x92,4:\
    \xe5\x88\x86\xe9\x92\x9f,5:\xe5\xb0\x8f\xe6\x97\xb6,6:\xe5\xa4\xa9\n\n\
    \x0c\n\x05\x04\x08\x02\x04\x05\x12\x03{\x08\r\n\x0c\n\x05\x04\x08\x02\
    \x04\x01\x12\x03{\x0e\x12\n\x0c\n\x05\x04\x08\x02\x04\x03\x12\x03{\x15\
    \x16\n!\n\x04\x04\x08\x08\x02\x12\x05~\x04\x80\x01\x05\x1a\x12[default\
    \x20=\x20false]\n\n\x0c\n\x05\x04\x08\x08\x02\x01\x12\x03~\n\x1a\n\x1e\n\
    \x04\x04\x08\x02\x05\x12\x03\x7f\x08\x1a\"\x11\x20\xe6\x98\xaf\xe5\x90\
    \xa6\xe8\x87\xaa\xe5\x8a\xa8ack\n\n\x0c\n\x05\x04\x08\x02\x05\x05\x12\
    \x03\x7f\x08\x0c\n\x0c\n\x05\x04\x08\x02\x05\x01\x12\x03\x7f\r\x15\n\x0c\
    \n\x05\x04\x08\x02\x05\x03\x12\x03\x7f\x18\x19\n\x0f\n\x02\x04\t\x12\x06\
    \x85\x01\0\x88\x01\x01\x1a\x01\n\n\x0b\n\x03\x04\t\x01\x12\x04\x85\x01\
    \x08\x10\n\x0c\n\x04\x04\t\x02\0\x12\x04\x86\x01\x04\x17\n\x0f\n\x05\x04\
    \t\x02\0\x04\x12\x06\x86\x01\x04\x85\x01\x12\n\r\n\x05\x04\t\x02\0\x05\
    \x12\x04\x86\x01\x04\t\n\r\n\x05\x04\t\x02\0\x01\x12\x04\x86\x01\n\x12\n\
    \r\n\x05\x04\t\x02\0\x03\x12\x04\x86\x01\x15\x16\n\x0c\n\x04\x04\t\x02\
    \x01\x12\x04\x87\x01\x04\x20\n\r\n\x05\x04\t\x02\x01\x04\x12\x04\x87\x01\
    \x04\x0c\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\x87\x01\r\x12\n\r\n\x05\x04\
    \t\x02\x01\x01\x12\x04\x87\x01\x13\x1b\n\r\n\x05\x04\t\x02\x01\x03\x12\
    \x04\x87\x01\x1e\x1f\n1\n\x02\x04\n\x12\x06\x8b\x01\0\x93\x01\x01\x1a#\
    \x20TBD\x20when\x20new\x20packets\x20are\x20required\n\n\x0b\n\x03\x04\n\
    \x01\x12\x04\x8b\x01\x08\x0c\n\x0c\n\x04\x04\n\x02\0\x12\x04\x8c\x01\x04\
    \x17\n\x0f\n\x05\x04\n\x02\0\x04\x12\x06\x8c\x01\x04\x8b\x01\r\n\r\n\x05\
    \x04\n\x02\0\x05\x12\x04\x8c\x01\x04\n\n\r\n\x05\x04\n\x02\0\x01\x12\x04\
    \x8c\x01\x0b\x12\n\r\n\x05\x04\n\x02\0\x03\x12\x04\x8c\x01\x15\x16\n\x0c\
    \n\x04\x04\n\x02\x01\x12\x04\x8d\x01\x04\x18\n\x0f\n\x05\x04\n\x02\x01\
    \x04\x12\x06\x8d\x01\x04\x8c\x01\x17\n\r\n\x05\x04\n\x02\x01\x05\x12\x04\
    \x8d\x01\x04\t\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\x8d\x01\x0b\x13\n\r\n\
    \x05\x04\n\x02\x01\x03\x12\x04\x8d\x01\x16\x17\n\x1f\n\x04\x04\n\x08\0\
    \x12\x06\x8f\x01\x04\x91\x01\x05\x1a\x0f\x20[default\x20=\x200]\n\n\r\n\
    \x05\x04\n\x08\0\x01\x12\x04\x8f\x01\n\x1b\n\x0c\n\x04\x04\n\x02\x02\x12\
    \x04\x90\x01\x08\x1c\n\r\n\x05\x04\n\x02\x02\x05\x12\x04\x90\x01\x08\r\n\
    \r\n\x05\x04\n\x02\x02\x01\x12\x04\x90\x01\x0e\x17\n\r\n\x05\x04\n\x02\
    \x02\x03\x12\x04\x90\x01\x1a\x1b\n\x0c\n\x02\x04\x0b\x12\x06\x95\x01\0\
    \x99\x01\x01\n\x0b\n\x03\x04\x0b\x01\x12\x04\x95\x01\x08\x16\n\x0c\n\x04\
    \x04\x0b\x02\0\x12\x04\x96\x01\x04\x1b\n\x0f\n\x05\x04\x0b\x02\0\x04\x12\
    \x06\x96\x01\x04\x95\x01\x17\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\x96\x01\
    \x04\n\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\x96\x01\x0b\x16\n\r\n\x05\x04\
    \x0b\x02\0\x03\x12\x04\x96\x01\x19\x1a\n\x0c\n\x04\x04\x0b\x02\x01\x12\
    \x04\x97\x01\x04\x19\n\x0f\n\x05\x04\x0b\x02\x01\x04\x12\x06\x97\x01\x04\
    \x96\x01\x1b\n\r\n\x05\x04\x0b\x02\x01\x05\x12\x04\x97\x01\x04\n\n\r\n\
    \x05\x04\x0b\x02\x01\x01\x12\x04\x97\x01\x0b\x14\n\r\n\x05\x04\x0b\x02\
    \x01\x03\x12\x04\x97\x01\x17\x18\n\x0c\n\x04\x04\x0b\x02\x02\x12\x04\x98\
    \x01\x04\x17\n\x0f\n\x05\x04\x0b\x02\x02\x04\x12\x06\x98\x01\x04\x97\x01\
    \x19\n\r\n\x05\x04\x0b\x02\x02\x05\x12\x04\x98\x01\x04\t\n\r\n\x05\x04\
    \x0b\x02\x02\x01\x12\x04\x98\x01\n\x12\n\r\n\x05\x04\x0b\x02\x02\x03\x12\
    \x04\x98\x01\x15\x16b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
